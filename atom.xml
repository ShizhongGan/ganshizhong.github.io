<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟声</title>
  <icon>https://www.gravatar.com/avatar/fa65dd480df94b0c4abae5c60b4365d4</icon>
  <subtitle>甘士忠个人博客</subtitle>
  <link href="http://shizhonggan.github.io/atom.xml" rel="self"/>
  
  <link href="http://shizhonggan.github.io/"/>
  <updated>2022-05-18T05:19:27.840Z</updated>
  <id>http://shizhonggan.github.io/</id>
  
  <author>
    <name>甘士忠</name>
    <email>gan_shizhong@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark部署</title>
    <link href="http://shizhonggan.github.io/2022/05/18/BigData/SparkDeploy/"/>
    <id>http://shizhonggan.github.io/2022/05/18/BigData/SparkDeploy/</id>
    <published>2022-05-18T07:54:23.000Z</published>
    <updated>2022-05-18T05:19:27.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="local-部署安装"><a class="markdownIt-Anchor" href="#local-部署安装"></a> Local 部署安装</h2><p>下载地址： <a href="https://dlcdn.apache.org/spark/spark-3.1.3/spark-3.1.3-bin-hadoop3.2.tgz">https://dlcdn.apache.org/spark/spark-3.1.3/spark-3.1.3-bin-hadoop3.2.tgz</a></p><p><a href="https://www.anaconda.com/products/distribution#Downloads">https://www.anaconda.com/products/distribution#Downloads</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">sh Anaconda3-2022.05-Linux-x86_64.sh</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 使环境生效</span></span><br><span class="line"></span><br><span class="line">conda list <span class="comment"># 正常</span></span><br><span class="line"></span><br><span class="line">python -V <span class="comment">#3.9</span></span><br><span class="line"><span class="comment">## 修改镜像源 </span></span><br><span class="line">vi ~/.condarc <span class="comment">## 网上自己找</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;channels:</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/pro/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64</span></span><br><span class="line"><span class="string"> - http://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/simpleitk/linux-64</span></span><br><span class="line"><span class="string"> - defaults</span></span><br><span class="line"><span class="string">show_channel_urls: true&#x27;</span> &gt; ~/.condarc</span><br><span class="line">conda config --show channels</span><br><span class="line">conda clean -i <span class="comment">## 保证生效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置虚拟环境</span></span><br><span class="line">conda create -n pyspark python=3.8</span><br><span class="line">    environment location: /opt/anaconda3/envs/pyspark</span><br><span class="line"></span><br><span class="line"><span class="comment">#To activate this environment, use</span></span><br><span class="line">$ conda activate pyspark</span><br><span class="line"></span><br><span class="line"><span class="comment"># To deactivate an active environment, use</span></span><br><span class="line">$ conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment">################# 安装spark</span></span><br><span class="line">tar -zxvf spark-3.1.3-bin-hadoop3.2.tgz</span><br><span class="line"></span><br><span class="line">ln -s /opt/spark-xxx /opt/spark <span class="comment"># 可以起别名，我这里直接用mv 替换文件夹名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置spark环境变量</span></span><br><span class="line">SPARK_HOME: Spark安装目录</span><br><span class="line">PYSPARK_PYTHON: 表示python想运行Python程序，去哪里找python执行器</span><br><span class="line">JAVA_HOME:告知Java在哪里</span><br><span class="line">HADOOP_CONF_DIR: 告知Spark Hadoop的配置文件位置</span><br><span class="line">HADOOP_HOME: 告知spark Hadoop安装在哪里</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export SPARK_HOME=/opt/spark</span></span><br><span class="line"><span class="string">export PYSPARK_PYTHON=/opt/anaconda3/envs/pyspark/bin/python3.8</span></span><br><span class="line"><span class="string">export JAVA_HOME=/opt/java/jdk1.8.0_271</span></span><br><span class="line"><span class="string">export HADOOP_CONF_DIR=/opt/hadoop/hadoop-3.2.3/etc/hadoop</span></span><br><span class="line"><span class="string">export HADOOP_HOME=/opt/hadoop/hadoop-3.2.3</span></span><br><span class="line"><span class="string">export PATH=$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH &#x27;</span> &gt;&gt; /etc/profile.d/spark-3.1.3.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYSPARK_PYTHON=/opt/anaconda3/envs/pyspark/bin/python3.8</span></span><br><span class="line"><span class="string">export JAVA_HOME=/opt/java/jdk1.8.0_271&#x27;</span>&gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">(base) [root@master ec2-user]<span class="comment"># conda activate pyspark</span></span><br><span class="line">(pyspark) [root@master ec2-user]<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt/spark/bin/</span><br><span class="line"><span class="comment">### pyspark 运行python脚本</span></span><br><span class="line">./pyspark</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am Spark&quot;</span>)</span><br><span class="line">sc.parallelize([1,2,3,4,5]).map(lambda x: x*10).collect()</span><br></pre></td></tr></table></figure><p><a href="http://ip">http://ip</a>:port 访问相应的端口ip可以看到spark job如下：<br /><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/sparkjob.png" alt="sparkjob" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### spark-shell 运行scala</span></span><br><span class="line">./spark-shell</span><br><span class="line">sc.parallelize(Array(1,2,3,4,5)).map(x=&gt;x*10).collect()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>spark-shell 运行scala交互如下：<br /><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/scala.png" alt="sparkscalajob" /></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### submit-submit 直接运行 </span></span><br><span class="line">./spark-submit --master <span class="built_in">local</span>[*] /opt/spark/examples/src/main/python/pi.py 10 <span class="comment">## 10次迭代求解圆周率</span></span><br></pre></td></tr></table></figure><p><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/spark-submit_pi.png" alt="spark-submit_pi" /></p><h2 id="standalone-架构"><a class="markdownIt-Anchor" href="#standalone-架构"></a> Standalone 架构</h2><p>Standalone 模式是Spark自带的一种集群模式，不同于前面本地模式启动多个进程来模拟集群环境，Standalone模式是真实的在多个机器之间搭建spark集群的环境，完全可以利用该模式搭建多机器集群，用于实际的大数据处理。</p><p>Standalone 是完整的spark运行环境，其中：</p><ul><li>Master角色以Master进程存在，worker角色以worker进程存在</li><li>Driver角色在运行时存在于Master进程内，Executor运行于Worker进程内</li></ul><p>Standalone集群在进程上主要有3类进程：</p><ul><li>主节点Master进程：<ul><li>master角色，管理整个集群资源，并托管运行各个任务的Driver</li></ul></li><li>从节点Workers:<ul><li>worker角色，管理每个机器的资源，分配对应的资源来运行Excutor（Task）</li></ul></li><li>历史服务器HistoryServer(可选)：<ul><li>spark Application运行完成以后，保存时间日志数据至HDFS，启动HistoryServer可以查看应用运行相关信息</li></ul></li></ul><h2 id="standalone-集群环境安装"><a class="markdownIt-Anchor" href="#standalone-集群环境安装"></a> Standalone 集群环境安装</h2><p>master 运行Spark的Master进程和1个work进程<br />worker1 运行Spark的1个work进程<br />worker2 运行Spark的1个work进程</p><h3 id="每台机器部署anacondapython-环境略同上"><a class="markdownIt-Anchor" href="#每台机器部署anacondapython-环境略同上"></a> 每台机器部署Anaconda(python) 环境【略，同上】</h3><h3 id="每台机器部署spark-环境略同上"><a class="markdownIt-Anchor" href="#每台机器部署spark-环境略同上"></a> 每台机器部署spark 环境【略,同上】</h3><h3 id="spark集群文件配置"><a class="markdownIt-Anchor" href="#spark集群文件配置"></a> spark集群文件配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/spark/conf</span><br><span class="line">cp workers.template workers</span><br><span class="line">cp spark-env.sh.template spark-env.sh</span><br><span class="line">cp spark-defaults.conf.template spark-defaults.conf</span><br><span class="line">cp log4j.properties.template log4j.properties</span><br><span class="line"><span class="comment"># 将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中</span></span><br><span class="line">hadoop fs -mkdir /sparklog</span><br><span class="line">mkdir -p /data/spark/<span class="built_in">log</span>/</span><br></pre></td></tr></table></figure><h4 id="1修改-workers"><a class="markdownIt-Anchor" href="#1修改-workers"></a> 1）修改 workers</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;master</span></span><br><span class="line"><span class="string">worker1</span></span><br><span class="line"><span class="string">worker2&#x27;</span> &gt;&gt; workers</span><br></pre></td></tr></table></figure><h4 id="2-修改-spark-envsh"><a class="markdownIt-Anchor" href="#2-修改-spark-envsh"></a> 2) 修改 <a href="http://spark-env.sh">spark-env.sh</a></h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">## java安装目录</span></span><br><span class="line"><span class="string">JAVA_HOME=/opt/java/jdk1.8.0_271</span></span><br><span class="line"><span class="string">## HADOOP软件配置文件目录，读取HDFS上文件和运行YARN集群</span></span><br><span class="line"><span class="string">HADOOP_CONF_DIR=/opt/hadoop/hadoop-3.2.3/etc/hadoop</span></span><br><span class="line"><span class="string">YARN_CONF_DIR=/opt/hadoop/hadoop-3.2.3/etc/hadoop</span></span><br><span class="line"><span class="string">## 指定spark master运行在哪台机器</span></span><br><span class="line"><span class="string">export SPARK_MASTER_HOST=master</span></span><br><span class="line"><span class="string">## 指定spark master的通讯端口</span></span><br><span class="line"><span class="string">export SPARK_MASTER_PORT=9777</span></span><br><span class="line"><span class="string">## 告知spark master的webui 端口</span></span><br><span class="line"><span class="string">SPARK_MASTER_WEBUI_PORT=9780</span></span><br><span class="line"><span class="string">## work cpu可用核数</span></span><br><span class="line"><span class="string">SPARK_WORKER_CORES=1</span></span><br><span class="line"><span class="string">## work 可用内存</span></span><br><span class="line"><span class="string">SPARK_WORKER_MEMORY=1g</span></span><br><span class="line"><span class="string">## work 的工作通讯地址</span></span><br><span class="line"><span class="string">SPARK_WORKER_PORT=9778</span></span><br><span class="line"><span class="string">## work 的webui地址</span></span><br><span class="line"><span class="string">SPARK_WORKER_WEBUI_PORT=9781</span></span><br><span class="line"><span class="string">## 设置历史服务器</span></span><br><span class="line"><span class="string"># 配置的意思是 将spark程序运行的历史日志 存到hdfs的/sparklog文件夹中</span></span><br><span class="line"><span class="string">SPARK_HISTORY_OPTS=&quot;-Dspark.history.fs.logDirectory=hdfs://master:9710/sparklog -Dspark.history.fs.cleaner.enabled=true&quot;</span></span><br><span class="line"><span class="string">&#x27;</span> &gt;&gt; spark-env.sh</span><br></pre></td></tr></table></figure><blockquote><p>hdfs://master:9710 对应 fs.defaultFS；同时需要在hadoop下创建/sparklog文件夹 “hadoop fs -mkdir /sparklog”</p></blockquote><h4 id="3-修改-spark-defaultsconf"><a class="markdownIt-Anchor" href="#3-修改-spark-defaultsconf"></a> 3) 修改 spark-defaults.conf</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"># 开启spark的日期记录功能</span></span><br><span class="line"><span class="string">spark.eventLog.enabled true</span></span><br><span class="line"><span class="string"># 设置spark日志记录路径</span></span><br><span class="line"><span class="string">spark.eventLog.dir hdfs://master:9710/sparklog/</span></span><br><span class="line"><span class="string"># spark.eventLog.dir file:/data/spark/log/</span></span><br><span class="line"><span class="string"># 设置spark日志是否启动压缩</span></span><br><span class="line"><span class="string">spark.eventLog.compress false</span></span><br><span class="line"><span class="string">&#x27;</span> &gt;&gt; spark-defaults.conf</span><br></pre></td></tr></table></figure><h4 id="4-修改-log4jproperties"><a class="markdownIt-Anchor" href="#4-修改-log4jproperties"></a> 4) 修改 log4j.properties</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootCategory=WARN, console <span class="comment"># 修改</span></span><br><span class="line"></span><br><span class="line">cat log4j.properties | grep log4j.rootCategory=</span><br><span class="line">sed -i <span class="string">&#x27;s#log4j.rootCategory=INFO, console#log4j.rootCategory=WARN, console#&#x27;</span> log4j.properties</span><br></pre></td></tr></table></figure><h4 id="复制文件到其他节点"><a class="markdownIt-Anchor" href="#复制文件到其他节点"></a> 复制文件到其他节点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scp workers 192.168.1.7:/opt/spark/conf</span><br><span class="line">scp spark-env.sh 192.168.1.7:/opt/spark/conf</span><br><span class="line">scp spark-defaults.conf 192.168.1.7:/opt/spark/conf</span><br><span class="line">scp log4j.properties 192.168.1.7:/opt/spark/conf</span><br><span class="line"></span><br><span class="line">scp workers 192.168.1.9:/opt/spark/conf</span><br><span class="line">scp spark-env.sh 192.168.1.9:/opt/spark/conf</span><br><span class="line">scp spark-defaults.conf 192.168.1.9:/opt/spark/conf</span><br><span class="line">scp log4j.properties 192.168.1.9:/opt/spark/conf</span><br></pre></td></tr></table></figure><h3 id="启动spark集群"><a class="markdownIt-Anchor" href="#启动spark集群"></a> 启动spark集群</h3><blockquote><p>一定要用&quot;./path/start-all.sh “或”./start-all.sh&quot;形式， 而不是绝对路径或直接文件执行</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop/hadoop-3.2.3/etc/hadoop/ &amp;&amp; stop-all.sh</span><br><span class="line"><span class="built_in">cd</span> /data/hadoop/pid/ </span><br><span class="line"></span><br><span class="line">./sbin/start-history-server.sh </span><br><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure><h3 id="检查spark集群"><a class="markdownIt-Anchor" href="#检查spark集群"></a> 检查spark集群</h3><p><a href="http://ip:9780">http://ip:9780</a></p><p><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/sparkclusterdepolysuccessful.png" alt="sparkclusterdepolysuccessful" /></p><h3 id="集群连接测试"><a class="markdownIt-Anchor" href="#集群连接测试"></a> 集群连接测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/spark</span><br><span class="line"><span class="comment">## pyspark</span></span><br><span class="line">./bin/pyspark --master spark://master:9777</span><br><span class="line">sc.parallelize([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]).map(lambda x: x*10).collect()</span><br><span class="line"></span><br><span class="line">sc.textFile(<span class="string">&quot;hdfs://master:9710/input/word.txt&quot;</span>).flatMap(lambda line: line.split(<span class="string">&quot; &quot;</span>)).map(lambda x:(x,1)).reduceByKey(lambda a,b: a+b).collect()</span><br><span class="line"><span class="comment">## spark-submit</span></span><br><span class="line">./bin/spark-submit --master spark://master:9777 /opt/spark/examples/src/main/python/pi.py 100</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ol><li>StandAlone的原理？</li></ol><p>Master和Worker角色以独立进程的形式存在，并组成Spark运行时环境（集群）</p><ol start="2"><li>Spark角色在StandAlone中的分布？</li></ol><p>Master角色： Master进程， worker角色： worker进程， Driver角色： 以线程运行在Master中，Excutor角色：以线程运行在worker中</p><ol start="3"><li>Standalone如何提交Spark应用？</li></ol><p>./bin/spark-submit --master spark://server:9777</p><ol start="4"><li>Job\Stage\Task的关系？</li></ol><p>一个Spark运行程序会被分成多个子任务（Job）运行，每一个Job会分成多个阶段（Stage）来运行，每个Stage内会分出来多个线程（Task）来执行具体任务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;local-部署安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#local-部署安装&quot;&gt;&lt;/a&gt; Local 部署安装&lt;/h2&gt;
&lt;p&gt;下载地址： &lt;a href=&quot;https://dlcdn.apache.org/spark/sp</summary>
      
    
    
    
    <category term="BigData" scheme="http://shizhonggan.github.io/categories/BigData/"/>
    
    <category term="Spark" scheme="http://shizhonggan.github.io/categories/BigData/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark StandAlone HA集群搭建</title>
    <link href="http://shizhonggan.github.io/2022/05/18/BigData/SparkStandAloneHA/"/>
    <id>http://shizhonggan.github.io/2022/05/18/BigData/SparkStandAloneHA/</id>
    <published>2022-05-18T07:54:23.000Z</published>
    <updated>2022-05-18T08:55:13.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="standalone-ha-运行原理"><a class="markdownIt-Anchor" href="#standalone-ha-运行原理"></a> StandAlone HA 运行原理</h2><p>Spark Standalone集群是Master-Slaves架构的集群模式，存在着Master单点故障的问题。</p><h3 id="高可用-ha"><a class="markdownIt-Anchor" href="#高可用-ha"></a> 高可用 HA</h3><p>解决单点故障有两种方案：</p><ol><li>基于文件系统的单点恢复（Single-Node Recovery with Local File System, SPOF）:<strong>只能用于开发或测试环境</strong></li></ol><h2 id="高可用ha-standalone集群阿健"><a class="markdownIt-Anchor" href="#高可用ha-standalone集群阿健"></a> 高可用HA StandAlone集群阿健</h2><h2 id="测试运行"><a class="markdownIt-Anchor" href="#测试运行"></a> 测试运行</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;standalone-ha-运行原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#standalone-ha-运行原理&quot;&gt;&lt;/a&gt; StandAlone HA 运行原理&lt;/h2&gt;
&lt;p&gt;Spark Standalone集群是Maste</summary>
      
    
    
    
    <category term="BigData" scheme="http://shizhonggan.github.io/categories/BigData/"/>
    
    <category term="Spark" scheme="http://shizhonggan.github.io/categories/BigData/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop安装常见错误</title>
    <link href="http://shizhonggan.github.io/2022/05/17/BigData/hadoop_installerror/"/>
    <id>http://shizhonggan.github.io/2022/05/17/BigData/hadoop_installerror/</id>
    <published>2022-05-17T07:54:23.000Z</published>
    <updated>2022-05-17T04:59:01.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tcp端口被占用"><a class="markdownIt-Anchor" href="#tcp端口被占用"></a> tcp端口被占用</h2><p>暴力重启，stop集群后常见该问题，一些端口tcp仍然保持连接，挨个kill较为麻烦，</p><h2 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h2><p>配置文件要认真人配置</p><h2 id="ping-socket-permission-denied-attempting-raw-socket"><a class="markdownIt-Anchor" href="#ping-socket-permission-denied-attempting-raw-socket"></a> ping: socket: Permission denied, attempting raw socket…</h2><p>ICMP协议开通</p><h2 id="javaioioexception-got-error-statuserror-status-message-ack-with-firstbadlink-as-192168179866"><a class="markdownIt-Anchor" href="#javaioioexception-got-error-statuserror-status-message-ack-with-firstbadlink-as-192168179866"></a> java.io.IOException: Got error, status=ERROR, status message , ack with firstBadLink as 192.168.1.7:9866</h2><p>端口打开</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tcp端口被占用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcp端口被占用&quot;&gt;&lt;/a&gt; tcp端口被占用&lt;/h2&gt;
&lt;p&gt;暴力重启，stop集群后常见该问题，一些端口tcp仍然保持连接，挨个kill较为麻烦，&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="BigData" scheme="http://shizhonggan.github.io/categories/BigData/"/>
    
    <category term="Hadoop" scheme="http://shizhonggan.github.io/categories/BigData/Hadoop/"/>
    
    
  </entry>
  
  <entry>
    <title>Hadoop 部署</title>
    <link href="http://shizhonggan.github.io/2022/05/14/BigData/SparkStandalone/"/>
    <id>http://shizhonggan.github.io/2022/05/14/BigData/SparkStandalone/</id>
    <published>2022-05-14T07:54:23.000Z</published>
    <updated>2022-05-18T09:01:12.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境"><a class="markdownIt-Anchor" href="#基础环境"></a> 基础环境</h2><p>三台Linux虚拟机服务器</p><p>node1: Master(HDFS\YARN\Spark) 和 Worker(HDFS\YARN\Spark)<br />node2: Worker(HDFS\YARN\Spark)<br />node3: Worker(HDFS\YARN\Spark) 和 Hive</p><p>Hadoop3集群、JDK1.8、Centos7.6</p><p>192.168.1.4 master 【绑定公网IP】<br />192.168.1.7 worker1<br />192.168.1.9 worker2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname master</span><br><span class="line">hostnamectl set-hostname worker1</span><br><span class="line">hostnamectl set-hostname worker2</span><br></pre></td></tr></table></figure><p>设置免密登录：<br /><a href="http://t.zoukankan.com/Nanaya-p-13202946.html">http://t.zoukankan.com/Nanaya-p-13202946.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line"></span><br><span class="line">scp &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub ec2-user@192.168.1.7:&#x2F;home&#x2F;ec2-user</span><br><span class="line"></span><br><span class="line">scp &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub ec2-user@192.168.1.9:&#x2F;home&#x2F;ec2-user</span><br><span class="line"></span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line">vim etc&#x2F;ssh&#x2F;sshd_config</span><br><span class="line"></span><br><span class="line">PermitRootLogin yes　# 允许root认证登录</span><br><span class="line">PubkeyAuthentication # 启用公钥私钥配对认证方式</span><br><span class="line">AuthorizedKeysFile .ssh&#x2F;authorized_keys # 公钥文件路径（和上面生成的文件相同）</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line">## 配置hosts</span><br><span class="line">echo &#39;192.168.1.4 master</span><br><span class="line">192.168.1.7 worker1</span><br><span class="line">192.168.1.9 worker2&#39; &gt;&gt; &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure><h2 id="local模式基本原理"><a class="markdownIt-Anchor" href="#local模式基本原理"></a> Local模式基本原理</h2><p>本质：启动一个JVM Process进程（一个进程里面有多个线程），执行任务Task<br />Local模式可以限制模拟Spark集群环境的线程数量，即Local[N]或Local[<em>],其中，N代表可以使用的N个线程，每个线程拥有一个CPU core。如果不指定N,则默认1个线程(该线程有1个Core)。通常Cpu有几个Core，就指定几个线程，最大化利用计算能力。如果是Local[</em>]，则按照Cpu最多的Cores设置线程数。</p><h2 id="下载安装三台"><a class="markdownIt-Anchor" href="#下载安装三台"></a> 下载安装【三台】</h2><p>参考：<br /><a href="https://blog.csdn.net/dream_an/article/details/80258283">https://blog.csdn.net/dream_an/article/details/80258283</a></p><p><a href="https://blog.csdn.net/weixin_53227758/article/details/121977047">https://blog.csdn.net/weixin_53227758/article/details/121977047</a> [很详细]</p><p><a href="https://blog.csdn.net/zyx1260168395/article/details/120921697?utm_medium=distribute.pc_relevant.none-task-blog-2">https://blog.csdn.net/zyx1260168395/article/details/120921697?utm_medium=distribute.pc_relevant.none-task-blog-2</a><sub>default</sub>baidujs_baidulandingword~default-0-120921697-blog-123827164.pc_relevant_antiscanv2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</p><p><a href="https://blog.csdn.net/weixin_49167174/article/details/123827164">https://blog.csdn.net/weixin_49167174/article/details/123827164</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">网上找java8的安装包，百度网盘比较好，官方下载需要一堆注册信息</span><br><span class="line"></span><br><span class="line">mkdir /opt/java <span class="comment"># 上传java</span></span><br><span class="line">tar -zxf jdk-8u271-linux-x64.tar.gz</span><br><span class="line">mv jdk1.8.0_271/ /opt/java/</span><br><span class="line"><span class="comment">## 配置JAVA环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/java/jdk1.8.0_271</span></span><br><span class="line"><span class="string">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span></span><br><span class="line"><span class="string">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin&#x27;</span> &gt; /etc/profile.d/jdk-1.8.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看java</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>hadoop3+配置文件 github配置文件源码地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hadoop官网：http://hadoop.apache.org/</span><br><span class="line">yum install wget <span class="comment"># 太慢，直接网页下载再上传</span></span><br><span class="line">https://downloads.apache.org/hadoop/common/hadoop-3.2.3/</span><br><span class="line"></span><br><span class="line">mkdir /opt/hadoop</span><br><span class="line"><span class="comment">#共需要配置/opt/hadoop/hadoop-3.2.3/etc/hadoop/下的六个个文件，分别是</span></span><br><span class="line"><span class="comment"># hadoop-env.sh、core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml、workers</span></span><br><span class="line">tar -zxf hadoop-3.2.3.tar.gz </span><br><span class="line">mv hadoop-3.2.3 /opt/hadoop/</span><br></pre></td></tr></table></figure><h2 id="修改master配置文件"><a class="markdownIt-Anchor" href="#修改master配置文件"></a> 修改master配置文件</h2><blockquote><p>配置文件，主从都一样，并不影响，除非主节点你不设置DataNode</p></blockquote><h3 id="配置文件备份"><a class="markdownIt-Anchor" href="#配置文件备份"></a> 配置文件备份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">cp hadoop-env.sh hadoop-env.sh.bak</span><br><span class="line">cp core-site.xml core-site.xml.bak</span><br><span class="line">cp hdfs-site.xml hdfs-site.xml.bak</span><br><span class="line">cp yarn-site.xml yarn-site.xml.bak</span><br><span class="line">cp mapred-site.xml mapred-site.xml.bak</span><br><span class="line">cp workers workers.bak</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a class="markdownIt-Anchor" href="#创建目录"></a> 创建目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/hadoop/tmp /data/hadoop/hdfs/data /data/hadoop/hdfs/name /data/hadoop/pid/ /data/hadoop/<span class="built_in">log</span>/</span><br></pre></td></tr></table></figure><h3 id="修改hadoop-envsh"><a class="markdownIt-Anchor" href="#修改hadoop-envsh"></a> <a href="http://xn--hadoop-env-yu6pe85r.sh">修改hadoop-env.sh</a> 环境变量</h3><p><a href="https://baijiahao.baidu.com/s?id=1668099113918809329&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1668099113918809329&amp;wfr=spider&amp;for=pc</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export JAVA_HOME=/opt/java/jdk1.8.0_271</span></span><br><span class="line"><span class="string">export HADOOP_HOME=/opt/hadoop/hadoop-3.2.3</span></span><br><span class="line"><span class="string">export HADOOP_PID_DIR=/data/hadoop/pid</span></span><br><span class="line"><span class="string">export HADOOP_LOG_DIR=/data/hadoop/log</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export HADOOP_MAPRED_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="string">export HADOOP_COMMON_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="string">export HADOOP_HDFS_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="string">export YARN_HOME=$HADOOP_HOME</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export HADOOP_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span></span><br><span class="line"><span class="string">export HDFS_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span></span><br><span class="line"><span class="string">export YARN_CONF_DIR=$&#123;HADOOP_HOME&#125;/etc/hadoop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># export HIVE_HOME=/opt/hive</span></span><br><span class="line"><span class="string"># export HBASE_HOME=/opt/hbase</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span></span><br><span class="line"><span class="string">export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</span></span><br><span class="line"><span class="string">export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export HDFS_NAMENODE_USER=&quot;root&quot;</span></span><br><span class="line"><span class="string">export HDFS_DATANODE_USER=&quot;root&quot;</span></span><br><span class="line"><span class="string">export HDFS_SECONDARYNAMENODE_USER=&quot;root&quot;</span></span><br><span class="line"><span class="string">export YARN_RESOURCEMANAGER_USER=&quot;root&quot;</span></span><br><span class="line"><span class="string">export YARN_NODEMANAGER_USER=&quot;root&quot; &#x27;</span> &gt;&gt; /opt/hadoop/hadoop-3.2.3/etc/hadoop/hadoop-env.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>也可以在/etc/profile.d/中配置</p></blockquote><h3 id="修改-core-sitexml"><a class="markdownIt-Anchor" href="#修改-core-sitexml"></a> 修改 core-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9710<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>name: <strong><a href="http://fs.default.name">fs.default.name</a></strong> 和<strong>fs.defaultFS</strong> 区别：FS是两台主机以上进行高可用配置，name则是单点使用;value: NameNode URI</p></blockquote><blockquote><p>name: <strong>io.file.buffer.size</strong>: Size of read/write buffer used in SequenceFiles</p></blockquote><blockquote><p>name: <strong>hadoop.tmp.dir</strong>： A base for other temporary directories.</p></blockquote><h3 id="修改-hdfs-sitexml"><a class="markdownIt-Anchor" href="#修改-hdfs-sitexml"></a> 修改 hdfs-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Configurations for NameNode: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/hdfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.ttp-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9711<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Configurations for DataNode: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/hadoop/hdfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>name: <strong>dfs.blocksize</strong>: HDFS blocksize of 256MB for large file-systems.</p></blockquote><blockquote><p>name: <strong>dfs.namenode.http-address</strong>: The address and the base port where the dfs namenode web ui will listen on.</p></blockquote><blockquote><p>name: <strong>dfs.namenode.handler.count</strong>: More NameNode server threads to handle RPCs from large number of DataNodes.</p></blockquote><blockquote><p>name: <strong>dfs.datanode.data.dir</strong>: If this is a comma-delimited list of directories, then data will be stored in all named directories, typically on different devices.</p></blockquote><h3 id="修改-yarn-sitexml"><a class="markdownIt-Anchor" href="#修改-yarn-sitexml"></a> 修改 yarn-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configurations for ResourceManager and NodeManager: 未配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configurations for ResourceManager: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9712<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9713<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9714<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Configurations for NodeManager: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configurations for History Server: 暂时不配置吧--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改-mapred-sitexml"><a class="markdownIt-Anchor" href="#修改-mapred-sitexml"></a> 修改 mapred-site.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configurations for MapReduce Applications: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Configurations for MapReduce JobHistory Server: --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:9715<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改-workers"><a class="markdownIt-Anchor" href="#修改-workers"></a> 修改 workers</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">worker1</span><br><span class="line">worker2</span><br></pre></td></tr></table></figure><h3 id="复制hadoop文件到其他集群-配置hadoop环境变量-格式化hdfs-开启集群-查看-关闭-重置集群"><a class="markdownIt-Anchor" href="#复制hadoop文件到其他集群-配置hadoop环境变量-格式化hdfs-开启集群-查看-关闭-重置集群"></a> 复制Hadoop文件到其他集群、配置Hadoop环境变量、格式化hdfs、开启集群、查看、关闭、重置集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/hadoop/tmp /data/hadoop/hdfs/data /data/hadoop/hdfs/name /data/hadoop/pid/ /data/hadoop/<span class="built_in">log</span>/</span><br><span class="line"></span><br><span class="line">scp hadoop-env.sh 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp core-site.xml 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp hdfs-site.xml 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp yarn-site.xml 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp mapred-site.xml 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp workers 192.168.1.7:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line"></span><br><span class="line">scp hadoop-env.sh 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp core-site.xml 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp hdfs-site.xml 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp yarn-site.xml 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp mapred-site.xml 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line">scp workers 192.168.1.9:/opt/hadoop/hadoop-3.2.3/etc/hadoop/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="格式化并启动集群"><a class="markdownIt-Anchor" href="#格式化并启动集群"></a> 格式化并启动集群</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/opt/hadoop/hadoop-3.2.3/bin/hdfs namenode -format </span><br><span class="line">/opt/hadoop/hadoop-3.2.3/sbin/start-all.sh</span><br><span class="line"></span><br><span class="line">/opt/hadoop/hadoop-3.2.3/sbin/start-dfs.sh</span><br><span class="line">/opt/hadoop/hadoop-3.2.3/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><pre class="highlight"><code class="">## 报错参考:https://mathsigit.github.io/blog_page/2017/11/16/hole-of-submitting-mr-of-hadoop300RC0/https://blog.csdn.net/qianhuihan/article/details/83379837https://www.jianshu.com/p/9ebe74753794https://stackoverflow.com/questions/50927577/could-not-find-or-load-main-class-org-apache-hadoop-mapreduce-v2-app-mrappmaster</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础环境&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础环境&quot;&gt;&lt;/a&gt; 基础环境&lt;/h2&gt;
&lt;p&gt;三台Linux虚拟机服务器&lt;/p&gt;
&lt;p&gt;node1: Master(HDFS\YARN\Spark) 和 Worker(HDFS\</summary>
      
    
    
    
    <category term="BigData" scheme="http://shizhonggan.github.io/categories/BigData/"/>
    
    <category term="Spark" scheme="http://shizhonggan.github.io/categories/BigData/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>Spark框架概述</title>
    <link href="http://shizhonggan.github.io/2022/05/01/BigData/SparkOverview/"/>
    <id>http://shizhonggan.github.io/2022/05/01/BigData/SparkOverview/</id>
    <published>2022-05-01T07:54:23.000Z</published>
    <updated>2022-05-18T08:57:50.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spark定义"><a class="markdownIt-Anchor" href="#spark定义"></a> Spark定义</h2><p>Apache Spark是用于<strong>大规模数据</strong>（Large-scala data）处理的<strong>统一</strong>（unified）分析引擎。</p><p>Spark最早源于一篇论文Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing, 该论文是由加州大学伯克利分校的Matei Zaharia 等人发表的。论文中提出了一种弹性分布式数据集（即：RDD）的概念。</p><p>A distributed memory abstraction that lets programmers perform in-memory computations on large clusters in a fault-tolerant manner.</p><p>RDD是一种分布式内存抽象，其使得程序员能够在大规模集群中做内存运算，并且有一定的容错。而这也是整个Spark的核心数据结构，Spark整个平台围绕着RDD进行。</p><p><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/sparkdatatask.png" alt="spark" /></p><h2 id="spark-vs-hadoopmapreduce"><a class="markdownIt-Anchor" href="#spark-vs-hadoopmapreduce"></a> Spark VS Hadoop(MapReduce)</h2><table><thead><tr><th></th><th>Haddop</th><th>Spark</th></tr></thead><tbody><tr><td>类型</td><td>基础平台，包含计算（MapReduce）、存储（HDFS）、调度(YARN)</td><td>纯计算工具（分布式）</td></tr><tr><td>场景</td><td>海量数据批处理(离线计算，磁盘迭代计算)</td><td>海量数据的批处理（内存计算、交互式计算）、海量数据流计算</td></tr><tr><td>价格</td><td>对机器要求低，便宜</td><td>堆内存有要求，相对较贵</td></tr><tr><td>编程范式</td><td>Map+Reduce, API较为底层，算法适应性差</td><td>RDD组成DAG有向环图，API较为顶层，方便使用</td></tr><tr><td>数据存储结构</td><td>MapReduce中间计算结果在HDFS磁盘上，延迟大</td><td>RDD中间运算结果在内存中，延迟小</td></tr><tr><td>运行方式</td><td>Task以进程方式维护，任务启动慢</td><td>Task以线程方式维护，任务启动快，可批量创建提高并行能力</td></tr></tbody></table><h2 id="spark四大特点"><a class="markdownIt-Anchor" href="#spark四大特点"></a> Spark四大特点</h2><ul><li>速度快 比Hadoop快一百倍<ul><li>Spark处理数据时，可以将中间内存处理结果存储到内存中</li><li>Spark提供了非常丰富的算子(API),可以做到复杂任务在一个Spark程序中完成</li></ul></li><li>易于使用 概念多，编程容易<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df &#x3D; spark.read.json(&quot;logs.json&quot;) # 读取数据</span><br><span class="line">df.where(&quot;age &gt; 20&quot;) # 过滤</span><br><span class="line">  . select(&quot;name.first&quot;).show() # 选取字段，进行展示</span><br></pre></td></tr></table></figure></li><li>通用性强<ul><li>在Spark的基础上，提供了Spark SQL、Spark Streaming、 MLib及 Graph在内的多个工具库</li></ul></li><li>运行方式 可以在Hadoop和Mesos上，也支持Standalone的独立运行模式，也支持云上Kubernetes（2.3以上版本）。<ul><li>数据源支持HDFS，Hbase,Cassandra和Kafak等多种途径</li></ul></li></ul><h2 id="spark框架模块"><a class="markdownIt-Anchor" href="#spark框架模块"></a> Spark框架模块</h2><p>Spark Core: Spark的核心，Spark核心功能均由Spark Core模块提供，是Spark运行的基础。Spark Core以RDD为数据抽象，提供Python, JAVA,Scala，R语言的API,可以编程进行海量离线数据处理</p><p>SparkSQL: 基于Spark Core之上，提供<strong>结构化数据</strong>的处理模块。SparkSQL支持以SQL语言对数据进行处理，SparkSQL本身针对<strong>离线计算</strong>场景。同时基于SparkSQL,Spark提供了<strong>StructuredStreaming模块</strong>，可以以SparkSQL为基础，进行数据的<strong>流式计算</strong>。</p><p>SparkStreaming: 以SparkCore为基础，提供数据的<strong>流式计算</strong>【有一定缺陷】</p><p>MLib: 以SparkCore为基础，进行<strong>机器学习计算</strong>，内置了大量的机器学习库和API算法。方便用户以分布式计算的模式进行机器学习计算</p><p>GraphX: 以SparkCore为基础，进行<strong>图计算</strong>，提供了大量的图计算API，方便用于以分布式计算模式进行图计算</p><h2 id="spark运行模式"><a class="markdownIt-Anchor" href="#spark运行模式"></a> Spark运行模式</h2><p>本地模式（单机, Local）【开发测试环境】</p><ul><li>以<strong>一个独立的进程</strong>，通过其内部的多个线程来模拟整个Spark运行时环境</li></ul><p>Standalone模式（集群）</p><ul><li>Spark中的各个角色以<strong>独立进程</strong>的形式存在，并组成Spark集群环境</li></ul><p>Hadoop YARN模式（集群）</p><ul><li>Spark的各个角色运行在<strong>YARN的容器内部</strong>，并组成Spark集群环境</li></ul><p>Kubernetes模式（容器集群）</p><ul><li>Spark中的各个角色<strong>运行在Kubernetes的容器内部</strong>，并组成Spark集群环境</li></ul><p>云服务模式（运行在云平台上）</p><h2 id="spark的架构角色"><a class="markdownIt-Anchor" href="#spark的架构角色"></a> Spark的架构角色</h2><p><img src="https://ganshizhong.gitee.io/blogimages/BigData/Spark/sparkframe.png" alt="sparkframe" /></p><h3 id="yarn-主要有四类角色从2个层面去看"><a class="markdownIt-Anchor" href="#yarn-主要有四类角色从2个层面去看"></a> YARN 主要有四类角色，从2个层面去看：</h3><p>资源管理层面</p><ul><li>集群资源管理者(Master):ResourceManager</li><li>单机资源管理者(Worker):NodeManager</li></ul><p>任务计算层面</p><ul><li>单任务管理者(Master):ApplicationMaster</li><li>单任务执行者(worker):Task(容器内计算框架的工作角色)</li></ul><h3 id="spar-主要有四类角色从2个层面去看"><a class="markdownIt-Anchor" href="#spar-主要有四类角色从2个层面去看"></a> Spar 主要有四类角色，从2个层面去看：</h3><p>资源管理层面</p><ul><li>集群资源管理者(Master)</li><li>单机资源管理者(Worker)</li></ul><p>任务计算层面</p><ul><li>单任务管理者(Driver)</li><li>单任务执行者(Executor)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;spark定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spark定义&quot;&gt;&lt;/a&gt; Spark定义&lt;/h2&gt;
&lt;p&gt;Apache Spark是用于&lt;strong&gt;大规模数据&lt;/strong&gt;（Large-scala data）处理</summary>
      
    
    
    
    <category term="BigData" scheme="http://shizhonggan.github.io/categories/BigData/"/>
    
    <category term="Spark" scheme="http://shizhonggan.github.io/categories/BigData/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>那些有点意思的python面试题</title>
    <link href="http://shizhonggan.github.io/2022/04/26/Python/interview1/"/>
    <id>http://shizhonggan.github.io/2022/04/26/Python/interview1/</id>
    <published>2022-04-26T07:00:04.000Z</published>
    <updated>2022-04-26T08:56:55.394Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla</summary>
      
    
    
    
    <category term="Python" scheme="http://shizhonggan.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://shizhonggan.github.io/tags/Python/"/>
    
    <category term="面试" scheme="http://shizhonggan.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>基于Ansible API的任务管理web系统</title>
    <link href="http://shizhonggan.github.io/2022/03/18/Ansible/ansible_api/"/>
    <id>http://shizhonggan.github.io/2022/03/18/Ansible/ansible_api/</id>
    <published>2022-03-18T07:35:04.000Z</published>
    <updated>2022-03-18T08:28:38.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="https://github.com/lfbear/ansible-api">https://github.com/lfbear/ansible-api</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#参考&quot;&gt;&lt;/a&gt; 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/lfbear/ansible-api&quot;&gt;https://github.com/lfbea</summary>
      
    
    
    
    <category term="Ansible" scheme="http://shizhonggan.github.io/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://shizhonggan.github.io/tags/Ansible/"/>
    
    <category term="devops" scheme="http://shizhonggan.github.io/tags/devops/"/>
    
    <category term="python3" scheme="http://shizhonggan.github.io/tags/python3/"/>
    
    <category term="django" scheme="http://shizhonggan.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>基于Ansible API的任务管理web系统</title>
    <link href="http://shizhonggan.github.io/2022/03/18/Ansible/ansible_ui/"/>
    <id>http://shizhonggan.github.io/2022/03/18/Ansible/ansible_ui/</id>
    <published>2022-03-18T07:35:04.000Z</published>
    <updated>2022-04-27T08:07:43.413Z</updated>
    
    <content type="html"><![CDATA[<p>AWX 是开源的ansible web工具</p><p>该教程是在Centos7/8下完成部署。</p><h2 id="配置selinux"><a class="markdownIt-Anchor" href="#配置selinux"></a> 配置SElinux</h2><p>Centos/RHEL 7/8 在默认情况下 SELiunx是开启状态，这里需要时期失效，将SELinux配置文件中的 SELINUX=enforcing 修改为 SELINUX=disable。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># vi &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line">...</span><br><span class="line">SELINUX&#x3D;disabled</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存退出后，reboot重启服务器。</p><h2 id="配置epel源"><a class="markdownIt-Anchor" href="#配置epel源"></a> 配置epel源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br><span class="line">yum -y install epel-release</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h2 id="所需要的安装包"><a class="markdownIt-Anchor" href="#所需要的安装包"></a> 所需要的安装包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git gcc gcc-c++ ansible nodejs gettext device-mapper-persistent-data lvm2 bzip2 python3-pip nano wget</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装docker</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo –directory-prefix &#x2F;etc&#x2F;yum.repos.d&#x2F;</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;0b&#x2F;f5&#x2F;be8e741434a4bf4ce5dbc235aa28ed0666178ea8986ddc10d035023744e6&#x2F;pip-20.2.4.tar.gz  #下载安装包</span><br><span class="line">tar -zxvf pip-20.2.4.tar.gz  # 解压</span><br><span class="line">cd pip-20.2.4&#x2F;</span><br><span class="line">sudo python setup.py install #给予权限不然可能安装失败</span><br><span class="line">pip install -U pip #再次更新</span><br><span class="line"></span><br><span class="line">pip install --ignore-installed requests</span><br><span class="line">pip install docker-compose # centos7用pip centos8用</span><br></pre></td></tr></table></figure><h2 id="安装awx"><a class="markdownIt-Anchor" href="#安装awx"></a> 安装AWX</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b 17.1.0 https://github.com/ansible/awx.git</span><br><span class="line">openssl rand -base64 30</span><br><span class="line">    p6gtdhmTKiyObdOM19CCqri2gNxPD+9xLNuyaxHy</span><br><span class="line">vi ~/awx/installer/inventory</span><br><span class="line"><span class="comment">#####</span></span><br><span class="line">postgres_data_dir=”/var/lib/awx/pgdocker”</span><br><span class="line">docker_compose_dir=”/var/lib/awx/awxcompose”</span><br><span class="line"></span><br><span class="line">pg_username=awx</span><br><span class="line">pg_password=Password@123</span><br><span class="line">pg_database=postgres</span><br><span class="line">admin_user=admin</span><br><span class="line">admin_password=Password@123</span><br><span class="line"></span><br><span class="line">secret_key=rVVKN3T9BaLffFhS4/kx8q6nyTiK660L28+yt0px</span><br><span class="line"></span><br><span class="line">awx_alternate_dns_servers=”114.114.114.114″</span><br><span class="line"></span><br><span class="line">project_data_dir=/var/lib/awx/projects</span><br><span class="line"><span class="comment">#####</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-playbook -i ~/awx/installer/inventory ~/awx/installer/install.yml</span><br></pre></td></tr></table></figure><blockquote><p>这里postgre docker容器起不起来，配置文件选择的12版本，修改为10版本就行，同时不做升级操作。网上有解决办法是改成12.1-apline版本，因此根据不同环境，自行选择</p></blockquote><h2 id="完成如下"><a class="markdownIt-Anchor" href="#完成如下"></a> 完成如下</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="防火墙"><a class="markdownIt-Anchor" href="#防火墙"></a> 防火墙</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">## 访问AWX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.abidibo.net&#x2F;blog&#x2F;2012&#x2F;06&#x2F;29&#x2F;deploy-django-applications-nginx-uwsgi-virtualenv-south-git-and-fabric-part-5&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">## 魔改</span><br><span class="line"></span><br><span class="line">### AWX_WEB </span><br></pre></td></tr></table></figure><p>“/home/ec2-user/work/awx_data/awx/awxcompose/nginx.conf:/etc/nginx/nginx.conf:ro”,<br />“/home/ec2-user/work/awx_data/awx/awxcompose/SECRET_KEY:/etc/tower/SECRET_KEY:rw”,<br />“awxcompose_rsyslog-socket:/var/run/awx-rsyslog:rw”,<br />“awxcompose_rsyslog-config:/var/lib/awx/rsyslog:rw”,<br />“awxcompose_supervisor-socket:/var/run/supervisor:rw”,<br />“/home/ec2-user/work/awx_data/awx/projects:/var/lib/awx/projects:rw”,<br />“/home/ec2-user/work/awx_data/awx/awxcompose/credentials.py:/etc/tower/conf.d/credentials.py:rw”,<br />“/home/ec2-user/work/awx_data/awx/awxcompose/redis_socket:/var/run/redis:rw”,<br />“/home/ec2-user/work/awx_data/awx/awxcompose/environment.sh:/etc/tower/conf.d/environment.sh:rw”</p><p>STATIC_ROOT = ‘/var/lib/awx/public/static’</p><p>PROJECTS_ROOT = ‘/var/lib/awx/projects’</p><p>AWX_ANSIBLE_COLLECTIONS_PATHS = ‘/var/lib/awx/vendor/awx_ansible_collections’</p><p>JOBOUTPUT_ROOT = ‘/var/lib/awx/job_status’</p><p>SECRET_KEY = get_secret()</p><p>ALLOWED_HOSTS = [’*’]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>docker exec -it awx_web bash<br />cat /etc/nginx/nginx.conf<br />location /static/ {<br />alias /var/lib/awx/public/static/;<br />}</p><pre><code>    location /favicon.ico &#123; alias /var/lib/awx/public/static/favicon.ico; &#125;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>dnf -y update &amp;&amp;     dnf -y install epel-release ‘dnf-command(config-manager)’ &amp;&amp;     dnf module -y enable ‘postgresql:10’ &amp;&amp;     dnf config-manager --set-enabled powertools &amp;&amp;     dnf -y install ansible     gcc     gcc-c++     git-core     glibc-langpack-en     libcurl-devel     libffi-devel     libtool-ltdl-devel     make     nodejs     nss     openldap-devel     patch     @postgresql:10     postgresql-devel     python3-devel     python3-pip     python3-psycopg2     python3-setuptools     swig     unzip     xmlsec1-devel     xmlsec1-openssl-devel</p><p>ansible-playbook -i installer/inventory installer/build.yml -vvvvvv &amp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 自定义Ansible Tower LOGO</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sh</span><br><span class="line"># 上传custom_console_logo.png到&#x2F;var&#x2F;lib&#x2F;awx&#x2F;public&#x2F;static&#x2F;assets&#x2F;</span><br><span class="line">vi &#x2F;var&#x2F;lib&#x2F;awx&#x2F;public&#x2F;static&#x2F;local_settings.json</span><br><span class="line">&#123;  “custom_logo” ： true &#125; # 如何设置为false 或不修改，则无法生效</span><br></pre></td></tr></table></figure><h2 id="awx-1710-部署-参考"><a class="markdownIt-Anchor" href="#awx-1710-部署-参考"></a> awx 17.1.0 部署 参考</h2><p><a href="https://n-guitar.hatenablog.com/entry/2021/10/16/020000">https://n-guitar.hatenablog.com/entry/2021/10/16/020000</a></p><p><a href="https://mpolinowski.github.io/devnotes/2021-04-28-ansible-tower-rhel">https://mpolinowski.github.io/devnotes/2021-04-28-ansible-tower-rhel</a></p><h2 id="免密登录"><a class="markdownIt-Anchor" href="#免密登录"></a> 免密登录</h2><p>使用方法参考文献</p><p>免密登录</p><p><a href="https://blog.csdn.net/qq_36830911/article/details/108107926">https://blog.csdn.net/qq_36830911/article/details/108107926</a></p><p><a href="http://t.zoukankan.com/Nanaya-p-13202946.html">http://t.zoukankan.com/Nanaya-p-13202946.html</a></p><p>使用方法</p><p><a href="https://blog.51cto.com/u_10616534/2407182">https://blog.51cto.com/u_10616534/2407182</a></p><p><a href="https://www.onitroad.com/jc/ya/ansible/how-to-add-new-inventory-create-host-credential-awx-ansible-tower.html">https://www.onitroad.com/jc/ya/ansible/how-to-add-new-inventory-create-host-credential-awx-ansible-tower.html</a></p><p><a href="https://www.unixarena.com/2018/12/awx-ansible-tower-inventory-bulk-hosts-import.html/">https://www.unixarena.com/2018/12/awx-ansible-tower-inventory-bulk-hosts-import.html/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;AWX 是开源的ansible web工具&lt;/p&gt;
&lt;p&gt;该教程是在Centos7/8下完成部署。&lt;/p&gt;
&lt;h2 id=&quot;配置selinux&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#配置selinux&quot;&gt;&lt;/a&gt; 配置SElinux&lt;/h</summary>
      
    
    
    
    <category term="Ansible" scheme="http://shizhonggan.github.io/categories/Ansible/"/>
    
    
    <category term="Ansible" scheme="http://shizhonggan.github.io/tags/Ansible/"/>
    
    <category term="devops" scheme="http://shizhonggan.github.io/tags/devops/"/>
    
    <category term="python3" scheme="http://shizhonggan.github.io/tags/python3/"/>
    
    <category term="django" scheme="http://shizhonggan.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>Django RESTframework 教程</title>
    <link href="http://shizhonggan.github.io/2022/03/16/Django/DjangoRESTframework/"/>
    <id>http://shizhonggan.github.io/2022/03/16/Django/DjangoRESTframework/</id>
    <published>2022-03-16T03:03:04.000Z</published>
    <updated>2022-04-02T09:03:36.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p><img src="https://ganshizhong.gitee.io/blogimages/Django/web1.png" alt="前后端不分离" /></p><p><img src="https://ganshizhong.gitee.io/blogimages/Django/web2.png" alt="前后端分离" /></p><h2 id="序列化和反序列化"><a class="markdownIt-Anchor" href="#序列化和反序列化"></a> 序列化和反序列化</h2><p>序列化：将程序中的一个数据结构转化为其他格式（字典、JSON、xml等），例如django中将模型类对象转化为JSON字符串，这一过程被称为序列化。增改查，删不用返回</p><p>反序列化：修改和新增</p><ul><li>增：校验请求数据-&gt; 执行反序列化 -&gt; 保存数据库 -&gt; 将保存的对象序列化输出</li><li>删：判断要删除的数据是否存在 -&gt; 执行数据库删除</li><li>改：判断要修改的数据是否存在  -&gt; 校验请求的数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化返回</li><li>查：查询数据库 -&gt; 将数据库序列化返回</li></ul><h2 id="drf作用"><a class="markdownIt-Anchor" href="#drf作用"></a> DRF作用</h2><p>Django REST framework 可以帮助我们简化序列化和反序列化部分的代码编写，大大提高REST API的开发速度。</p><h2 id="drf特点"><a class="markdownIt-Anchor" href="#drf特点"></a> DRF特点</h2><ul><li>提供了定义序列化器Serializer的方法，可以快速根据Django ORM 或者其他库自动序列化/反序列化</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写</li><li>丰富的定制层级：函数视图、类视图、试图集合到自动生成API，满足各种需求</li><li>多种身份认证和权限认证方式的支持</li><li>内置了限流系统</li><li>直观的API web界面</li><li>可扩展性，插件丰富</li></ul><h2 id="相关文档"><a class="markdownIt-Anchor" href="#相关文档"></a> 相关文档</h2><p>官方文档： <a href="http://www.django-rest-framework.org/">http://www.django-rest-framework.org/</a></p><p>源码：<a href="https://github.com/encode/django-rest-framework/tree/master">https://github.com/encode/django-rest-framework/tree/master</a></p><h2 id="drf安装使用"><a class="markdownIt-Anchor" href="#drf安装使用"></a> DRF安装使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 环境依赖</span></span><br><span class="line">pip install djangorestframework</span><br><span class="line">pip install markdown       <span class="comment"># Markdown support for the browsable API.</span></span><br><span class="line">pip install django-filter  <span class="comment"># Filtering support</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## Add &#x27;rest_framework&#x27; to your INSTALLED_APPS setting.</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## If you&#x27;re intending to use the browsable API you&#x27;ll probably also want to add REST framework&#x27;s login and logout views. Add the following to your root urls.py file.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>)) <span class="comment"># Note that the URL path can be whatever you want.</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">## </span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># Use Django&#x27;s standard `django.contrib.auth` permissions,</span></span><br><span class="line">    <span class="comment"># or allow read-only access for unauthenticated users.</span></span><br><span class="line">    <span class="string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [</span><br><span class="line">        <span class="string">&#x27;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 添加路由</span></span><br><span class="line">from django.urls import path, include</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line">from rest_framework import routers, serializers, viewsets</span><br><span class="line"></span><br><span class="line"><span class="comment"># Serializers define the API representation.</span></span><br><span class="line">class UserSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class="line">    class Meta:</span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">&#x27;url&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;is_staff&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># ViewSets define the view behavior.</span></span><br><span class="line">class UserViewSet(viewsets.ModelViewSet):</span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Routers provide an easy way of automatically determining the URL conf.</span></span><br><span class="line">router = routers.DefaultRouter()</span><br><span class="line">router.register(r<span class="string">&#x27;users&#x27;</span>, UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wire up our API using automatic URL routing.</span></span><br><span class="line"><span class="comment"># Additionally, we include login URLs for the browsable API.</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, include(router.urls)),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, include(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="drf-序列化器"><a class="markdownIt-Anchor" href="#drf-序列化器"></a> DRF 序列化器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class BookInfo(models.Model):</span><br><span class="line">    btitle &#x3D; models.CharField(max_length&#x3D;30, verbose_name &#x3D;&#39;名称&#39;)</span><br><span class="line">    bup_date &#x3D; models.DateField(auto_now&#x3D;True, verbose_name&#x3D;&#39;发布日期&#39;)</span><br><span class="line"></span><br><span class="line">## 自定义序列化器</span><br><span class="line">class BookInfoSerializer1(serializers.Serializer):</span><br><span class="line">    # read_only&#x3D;True 只做序列化 write_only&#x3D;True 只做反序列化</span><br><span class="line">    id &#x3D; serializers.IntegerField(label&#x3D;&quot;ID&quot;, read_only&#x3D;True)</span><br><span class="line">    btitle &#x3D; serializers.CharField(max_length&#x3D;30, label&#x3D;&#39;名称&#39;,required&#x3D;True)</span><br><span class="line">    bup_date &#x3D; serializers.DateField(label&#x3D;&#39;发布日期&#39;)</span><br><span class="line">    hello &#x3D; serializers.CharField(max_length&#x3D;10) # 新添加的字段</span><br><span class="line"></span><br><span class="line">from booktest.serializers import BookInfoSerializer, HeroInfoSerializer</span><br><span class="line">from booktest.models import BookInfo, HeroInfo</span><br><span class="line">book &#x3D; BookInfo.objects.get(id&#x3D;1)</span><br><span class="line">s &#x3D; BookInfoSerializer1(instance&#x3D;book, many&#x3D;False)</span><br><span class="line">s.data</span><br><span class="line"></span><br><span class="line">books &#x3D; BookInfo.objects.all()</span><br><span class="line">s &#x3D; BookInfoSerializer1(instance&#x3D;books, many&#x3D;True)</span><br><span class="line">s.data</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>序列化器中的字段个数可以与模型的属性个数不同<ul><li>可以添加不存在的，也可以不写，但是不能修改</li></ul></li><li>创建序列化器有两个参数BookInfoSerializer(instance, data)<ul><li>S = BookInfoSerializer(instance=book, many=true) 只做序列化， S.data 可以取值<ul><li>序列化 == 模型数据 -&gt; python字典（用于输出，返回数据给前端）</li></ul></li><li>S = BookInfoSerializer(data=data) 只做反序列化<ul><li>反序列化 == 前端发送的数据 -&gt; 经过验证 -&gt; python字典 -&gt;save -&gt;模型类对象（用于输入，接受前端数据）</li></ul></li></ul></li></ul><blockquote><p>jsonresponse 如果返回的是列表，safe=False; 序列化如果是一个查询集合，many=True</p></blockquote><h2 id="drf-关联序列化"><a class="markdownIt-Anchor" href="#drf-关联序列化"></a> DRF 关联序列化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 只能序列化输出, 默认是将关联模型的ID序列化</span><br><span class="line">hbook &#x3D; serializers.PrimaryKeyRelatedField(label&#x3D;&quot;书籍&quot;,read_only&#x3D;True) </span><br><span class="line"></span><br><span class="line"># 默认是将关联模型的__str__方法返回值序列化</span><br><span class="line">hbook &#x3D; serializers.StringRelatedField(label&#x3D;&quot;书籍&quot;, read_only&#x3D;True)  </span><br><span class="line"></span><br><span class="line"># 关联模型对象的序列化器中所有字段序列化出来</span><br><span class="line">hbook &#x3D; BookInfoSerializer1(read_only&#x3D;True) </span><br><span class="line"></span><br><span class="line"># 如果一里面关联序列化多时，需要指定many&#x3D;True</span><br><span class="line">heroinfo_set &#x3D; HeroInfoSerializer1(many&#x3D;True)</span><br></pre></td></tr></table></figure><blockquote><p>两个序列化器只能一个做关联</p></blockquote><h2 id="drf-反序列化"><a class="markdownIt-Anchor" href="#drf-反序列化"></a> DRF 反序列化</h2><ul><li>is_valid()方法 ：在获取序列化的数据前，通过该方法进行验证</li><li>errors属性: 验证失败，可以通过序列化器对象的errors属性获取错误信息，返回字典</li><li>validated_data属性： 验证成功，获取数据</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;btitle&#x27;</span>: <span class="string">&#x27;三国&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serializer = BookInfoSerializer(data=data)</span><br><span class="line">serializer.is_valid() <span class="comment"># 调用序列化器的校验方法， True或False【必须执行】</span></span><br><span class="line">serializer.is_valid(raise_exception=<span class="literal">True</span>) <span class="comment"># 校验出错后，自动抛出错误信息</span></span><br><span class="line">serializer.errors <span class="comment"># 获取校验的错误信息，可不用，用上面这一个</span></span><br><span class="line">serializer.validated_data <span class="comment"># 获取反序列化校验后的数据还是字典【然后执行】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 额外对某些字段进行校验</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookInfoSerializer1</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="comment"># read_only=True 只做序列化 write_only=True 只做反序列化</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&quot;ID&quot;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    btitle = serializers.CharField(max_length=<span class="number">30</span>, label=<span class="string">&#x27;名称&#x27;</span>,required=<span class="literal">True</span>)</span><br><span class="line">    bup_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>)</span><br><span class="line">    hello = serializers.CharField(max_length=<span class="number">10</span>) <span class="comment"># 新添加的字段</span></span><br><span class="line">    <span class="comment">## 以下是反序列化进行的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate_btitle</span>(<span class="params">self, value</span>):</span> <span class="comment"># 对某字段单独添加校验，注意命名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        <span class="comment"># 多个字段进行联合校验</span></span><br><span class="line">        attrs[<span class="string">&quot;hello&quot;</span>] = <span class="string">&quot;word&quot;</span> <span class="comment"># 添加数据   </span></span><br><span class="line">        <span class="keyword">return</span> attrs </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">validate_btitle</span>(<span class="params">self, value</span>):</span> <span class="comment"># 对某字段单独添加校验，注意命名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">self, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># validated_data 反序列化校验后的字典型数据</span></span><br><span class="line">        <span class="comment"># 当调用序列化器的save方法时，如果当初创建序列化器对象是没有给instance传参数</span></span><br><span class="line">        book = BookInfo.objects.create(**validated_data)</span><br><span class="line">        BookInfo.objects.create(**&#123;<span class="string">&#x27;btitle&#x27;</span>:<span class="string">&#x27;三国&#x27;</span>&#125;) <span class="comment"># 将字典 转换成 关键字=value 这种格式</span></span><br><span class="line">        BookInfo.objects.create(</span><br><span class="line">            btitle=<span class="string">&quot;三国&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> book</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">self, instance, validated_data</span>):</span></span><br><span class="line">        <span class="comment"># 如果传入参数，实际上会调用该方法</span></span><br><span class="line">        instance.btitle = validated_data.get(<span class="string">&#x27;btitle&#x27;</span>)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="comment">## 校验成功后操作</span></span><br><span class="line">serializer.save() <span class="comment"># 会执行序列化器中的create方法或update方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#介绍&quot;&gt;&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://ganshizhong.gitee.io/blogimages/Django/web1.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="Django" scheme="http://shizhonggan.github.io/categories/Django/"/>
    
    
    <category term="Django" scheme="http://shizhonggan.github.io/tags/Django/"/>
    
    <category term="RESTful" scheme="http://shizhonggan.github.io/tags/RESTful/"/>
    
    <category term="API" scheme="http://shizhonggan.github.io/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>基于docker部署的gitlab迁移</title>
    <link href="http://shizhonggan.github.io/2022/03/16/Docker/gitlabmigrate/"/>
    <id>http://shizhonggan.github.io/2022/03/16/Docker/gitlabmigrate/</id>
    <published>2022-03-16T03:03:04.000Z</published>
    <updated>2022-03-29T08:09:42.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><p>准备一台新云主机，系统centos7.6，挂载一块硬盘（以往经验挺耗内存的）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#0. 挂载硬盘</span></span><br><span class="line">fdisk -l <span class="comment"># 查看磁盘</span></span><br><span class="line">fdisk /dev/vdc <span class="comment"># 对磁盘进行分区</span></span><br><span class="line">n</span><br><span class="line">e <span class="comment"># 选择拓展分区</span></span><br><span class="line">w <span class="comment"># 退出</span></span><br><span class="line">fdisk /dev/vdc </span><br><span class="line">n </span><br><span class="line">l <span class="comment"># 创建逻辑分区</span></span><br><span class="line">w <span class="comment"># 退出</span></span><br><span class="line">vi /etc/fstab <span class="comment"># 修改挂载配置文件信息，添加：</span></span><br><span class="line">/etc/vdc5 /../work/ default 0 0 <span class="comment"># 绝对路径</span></span><br><span class="line">mount /etc/vdc5 /../work/ <span class="comment"># 挂载重启也无事</span></span><br><span class="line"><span class="comment">#1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过 uname -r 命令查看你当前的内核版本</span></span><br><span class="line"></span><br><span class="line">$ uname -r</span><br><span class="line"><span class="comment"># 2、使用 root 权限登录 Centos。确保 yum 包更新到最新。</span></span><br><span class="line"></span><br><span class="line">$ sudo yum update</span><br><span class="line"><span class="comment">#3、卸载旧版本(如果安装过旧版本的话)</span></span><br><span class="line"></span><br><span class="line">$ sudo yum remove docker  docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment">#4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span></span><br><span class="line"></span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#5、设置yum源</span></span><br><span class="line"></span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、可以查看所有仓库中所有docker版本，并选择特定版本安装</span></span><br><span class="line"></span><br><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line"><span class="comment">#7、安装docker</span></span><br><span class="line"></span><br><span class="line">$ sudo yum install docker-ce  <span class="comment">#由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</span></span><br><span class="line">$ sudo yum install &lt;FQPN&gt;  <span class="comment"># 例如：sudo yum install docker-ce-17.12.1.ce</span></span><br><span class="line">sudo yum install docker-ce-17.12.1.ce</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改docker.service配置文件，在EXECStart的后面增加 --graph=/data/docker(修改后的docker存储路径)。</span></span><br><span class="line"><span class="comment"># 方法一：【这个比较好】</span></span><br><span class="line">cat /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;data-root&quot;</span>: <span class="string">&quot;/home/ec2-user/work/docker&quot;</span>,</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>], <span class="comment"># 这个下载速度挺快</span></span><br><span class="line">  <span class="string">&quot;mtu&quot;</span>: 1400</span><br><span class="line">&#125;</span><br><span class="line">方法二：【一般】</span><br><span class="line">vim /usr/lib/systemd/system/docker.service</span><br><span class="line">......</span><br><span class="line">ExecStart=/usr/bin/dockerd --graph=/data/docker</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行下列命令然后重启docker</span></span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">disable</span> docker.service</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><h2 id="搭建私人git仓库"><a class="markdownIt-Anchor" href="#搭建私人git仓库"></a> 搭建私人git仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.ganshizhong.com \</span><br><span class="line">  --publish 8011:80 --publish 8010:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /home/ec2-user/work/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /home/ec2-user/work/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume /home/ec2-user/work/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><h2 id="更换远程仓库地址"><a class="markdownIt-Anchor" href="#更换远程仓库地址"></a> 更换远程仓库地址</h2><p>首先进入项目所在文件夹，右键git bash</p><p>（1）查看当前的远程地址</p><pre><code>      git remote -v</code></pre><p>（2）删除当前的远程地址</p><pre><code>     git remote rm origin</code></pre><p>（3）添加远程地址</p><pre><code>     git remote add origin (git@...)</code></pre><p>（*4）首次推代码</p><pre><code>     git push -u origin master</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境准备&quot;&gt;&lt;/a&gt; 环境准备&lt;/h2&gt;
&lt;p&gt;准备一台新云主机，系统centos7.6，挂载一块硬盘（以往经验挺耗内存的）&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="Docker" scheme="http://shizhonggan.github.io/categories/Docker/"/>
    
    
    <category term="docker" scheme="http://shizhonggan.github.io/tags/docker/"/>
    
    <category term="gitlab" scheme="http://shizhonggan.github.io/tags/gitlab/"/>
    
  </entry>
  
  <entry>
    <title>Python 内存管理 &amp; 垃圾回收</title>
    <link href="http://shizhonggan.github.io/2022/03/09/Python/memoryManagement/"/>
    <id>http://shizhonggan.github.io/2022/03/09/Python/memoryManagement/</id>
    <published>2022-03-09T06:39:04.000Z</published>
    <updated>2022-03-09T09:03:39.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="非人话定义"><a class="markdownIt-Anchor" href="#非人话定义"></a> 非人话定义</h2><ul><li>引用计数器为主</li><li>标记清楚和分代回收为辅</li><li><ul><li>缓存机制</li></ul></li></ul><h2 id="python-垃圾回收"><a class="markdownIt-Anchor" href="#python-垃圾回收"></a> Python 垃圾回收</h2><h3 id="引用计数器"><a class="markdownIt-Anchor" href="#引用计数器"></a> 引用计数器</h3><h4 id="1-环状的双向链表-refchain-循环双向链表"><a class="markdownIt-Anchor" href="#1-环状的双向链表-refchain-循环双向链表"></a> <strong>1. 环状的双向链表 refchain , 循环双向链表</strong></h4><p>python 创建的任何对象都会放在refchain链表中。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;gsz&quot;</span></span><br><span class="line">age=<span class="number">27</span></span><br><span class="line">hobby =[<span class="string">&quot;游泳&quot;</span>]</span><br><span class="line"></span><br><span class="line">name=<span class="string">&quot;gsz&quot;</span> 内部会创建一些数据【上一个对象、下一个对象、类型、引用的个数】</span><br><span class="line">new= name 这个时候new会直接应用，并且引用个数+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">age=<span class="number">27</span> 内部会创建一些数据【上一个对象、下一个对象、类型、引用的个数、value=<span class="number">18</span>】</span><br><span class="line"></span><br><span class="line">hobby =[<span class="string">&quot;游泳&quot;</span>] 内部会创建一些数据【上一个对象、下一个对象、类型、引用的个数、items=元素、元素个数】</span><br></pre></td></tr></table></figure><p>在C源码中，通过**PyObject结构体（4个值）**体现每个对象都有相同的值</p><p>多个元素组成的对象，<strong>PyObject</strong>+<strong>ob_size</strong></p><h4 id="2-类型封装结构"><a class="markdownIt-Anchor" href="#2-类型封装结构"></a> <strong>2. 类型封装结构</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data&#x3D;3.14</span><br><span class="line"></span><br><span class="line">内部会创建：</span><br><span class="line">    _ob_pre &#x3D; refchain中的上一个对象</span><br><span class="line">    _ob_next &#x3D; refchain中的下一个对象</span><br><span class="line">    ob_refcnt&#x3D;1</span><br><span class="line">    ob_type&#x3D;float</span><br><span class="line">    ob_fval &#x3D; 3.13</span><br></pre></td></tr></table></figure><h4 id="3-引用计数器"><a class="markdownIt-Anchor" href="#3-引用计数器"></a> <strong>3. 引用计数器</strong></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1 =<span class="number">3.14</span></span><br><span class="line">v2=<span class="number">999</span></span><br><span class="line">v3=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>python程序运行时，会根据数据类型的不同找到其对应的结构体，根据结构体中的字段来进行创建相关的数据，然后将对象添加refchain双线链表中。</p><p>在C源码中有两个关键的结构体，PyObject,PyVarObject</p><p>每个对象中有ob_refcnt就是引用计数器，默认值为1，当其他变量引用对象时，应用计数器就会发生变化。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引用</span></span><br><span class="line">a=<span class="number">999</span></span><br><span class="line">b=a <span class="comment"># 计数器+1</span></span><br><span class="line"><span class="comment"># 删除引用</span></span><br><span class="line">a=<span class="number">999</span></span><br><span class="line">b=a  <span class="comment"># a和b指向同一个对象</span></span><br><span class="line"><span class="keyword">del</span> b <span class="comment"># b变量删除，b对应对象引用计数器-1</span></span><br><span class="line"><span class="keyword">del</span> a <span class="comment"># a变量删除，a对应对象引用计数器-1</span></span><br></pre></td></tr></table></figure><blockquote><p>当一个对象的引用计数器为0时，意味着没有人在使用这个对象了，这个对象就是垃圾，然后进行垃圾回收。<br />回收：1.将对象从reflchain链表移除；2.将对象销毁，内存归还。</p></blockquote><h4 id="4-循环引用存在问题"><a class="markdownIt-Anchor" href="#4-循环引用存在问题"></a> <strong>4. 循环引用存在问题</strong></h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">v2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">v1.append(v2) <span class="comment"># 引用计数器+1=2</span></span><br><span class="line">v2.append(v1) <span class="comment"># 引用计数器+1=2</span></span><br><span class="line"><span class="keyword">del</span> v1 <span class="comment"># 引用计数器-1</span></span><br><span class="line"><span class="keyword">del</span> v2 <span class="comment"># 引用计数器-1</span></span><br></pre></td></tr></table></figure><blockquote><p>此时，变量v1,v2删除，但是指向的数据对象并没有销毁，这些数据一直存在内存中</p></blockquote><h3 id="标记清除"><a class="markdownIt-Anchor" href="#标记清除"></a> 标记清除</h3><p>目的：为了解决引用计数器循环引用的不足</p><p>实现方法： 在python的底层再维护一个链表，链表中专门放那些可能存在循环引用的对象（list,tuple,dict,set等可能被引用的数据）</p><p>在python内部 某种情况下触发，会去扫描 可能存在循环应用的链表中的每个元素，检查是否有循环引用，如果有让双方的引用计数器-1；如果是0则垃圾回收。</p><p>也存在问题：</p><ul><li>什么时候扫描？</li><li>链表扫描代价大，耗时久</li></ul><h3 id="分代回收"><a class="markdownIt-Anchor" href="#分代回收"></a> 分代回收</h3><ol><li>将可能存在循环引用的对象维护成三个链表：<ul><li>0代： 0代中对象个数达到700个扫描一次</li><li>1代： 0代扫描10次，1代扫描一次</li><li>2代： 1代扫描10次，2代扫描一次</li></ul></li></ol><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><p>python中维护了一个refchain的双向环状链表，这个链表中存储程序创建的对象，每种类型的对象中都有一个ob_refcnt引用计数器的值，引用个数+1，-1，最后当引用计数器变为0时会进行垃圾回收（对象销毁、refchain中移除）</p><p>但是，在python中对于那些可以有多个元素组成的对象会存在循环引用的问题，为了解决这个问题python又引用标记清除和分代回收，在内部为四个链表。</p><p>在源码内部当达到各自的阈值，就会触发扫描链表进行标记清除的东走（有循环则各自-1）</p><p><strong>但是，源码内部在上述的流程中提出了优化机制</strong></p><h3 id="缓存机制"><a class="markdownIt-Anchor" href="#缓存机制"></a> 缓存机制</h3><h4 id="1-池"><a class="markdownIt-Anchor" href="#1-池"></a> <strong>1. 池</strong></h4><p>为了避免重复创建和销毁常见对象，维护池。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动解释器时，python内部会帮助创建-5，-4，...257</span></span><br><span class="line">v1 = <span class="number">7</span> <span class="comment"># 内部不会开辟，直接去池中获取</span></span><br><span class="line">v2 = <span class="number">9</span> <span class="comment"># 内部不会开辟，直接去池中获取</span></span><br><span class="line">v3 = <span class="number">9</span> <span class="comment"># 内部不会开辟，直接去池中获取</span></span><br></pre></td></tr></table></figure><h4 id="2-free_listfloatlisttupledict"><a class="markdownIt-Anchor" href="#2-free_listfloatlisttupledict"></a> <strong>2. free_list（float/list/tuple/dict）</strong></h4><p>当一个对象的引用计数器为0时，按理说应该回收，但内部不会直接回收，而是将对象添加到free_list链表中当缓存，以后再创建对象时，不会重新开辟内存，而是直接使用free_list</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">3.14</span> <span class="comment"># 开辟内存，内部存储结构体中定义的那几个值，并存到refchain中</span></span><br><span class="line"><span class="keyword">del</span> v1  <span class="comment"># refchain中移除，将对象添加到free_list中，当free_list满了则销毁</span></span><br><span class="line">v9 =<span class="number">99.99</span> <span class="comment"># 不会重新开辟内存，去free_list中获取对象，对象内部数据初始化，再放到refchain中</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://pythonav.com/wiki/detail/6/88/">https://pythonav.com/wiki/detail/6/88/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;非人话定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#非人话定义&quot;&gt;&lt;/a&gt; 非人话定义&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引用计数器为主&lt;/li&gt;
&lt;li&gt;标记清楚和分代回收为辅&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;缓存机制&lt;/li&gt;</summary>
      
    
    
    
    <category term="Python" scheme="http://shizhonggan.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="http://shizhonggan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python发布包和模块--setup.py</title>
    <link href="http://shizhonggan.github.io/2022/03/09/Python/setup/"/>
    <id>http://shizhonggan.github.io/2022/03/09/Python/setup/</id>
    <published>2022-03-09T06:39:04.000Z</published>
    <updated>2022-03-24T09:07:18.654Z</updated>
    
    
    
    
    <category term="Python" scheme="http://shizhonggan.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="http://shizhonggan.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 并发编程</title>
    <link href="http://shizhonggan.github.io/2022/02/25/Python/concurrentprogramming/"/>
    <id>http://shizhonggan.github.io/2022/02/25/Python/concurrentprogramming/</id>
    <published>2022-02-25T08:39:04.000Z</published>
    <updated>2022-02-25T06:10:49.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并发编程"><a class="markdownIt-Anchor" href="#并发编程"></a> 并发编程</h2><h3 id="并发编程程序提速方法"><a class="markdownIt-Anchor" href="#并发编程程序提速方法"></a> 并发编程，程序提速方法：</h3><ul><li>单线程串行<ul><li>不加改造的程序</li><li>CPU-IO-CPU-IO… IO期间CPU是等待状态的</li></ul></li><li>多线程并发<ul><li>threading</li><li>IO的同时让CPU进行其他任务，IO执行完CPU执行下一步任务</li></ul></li><li>多CPU并行<ul><li>multiprocessing</li><li>每个CPU都可以 CPU-IO…</li></ul></li><li>多机器并行<ul><li>hadoop/hive/spark</li><li></li></ul></li></ul><p><a href="https://blog.csdn.net/chenkaifang/article/details/80961211">https://blog.csdn.net/chenkaifang/article/details/80961211</a><br /><a href="https://www.dongwm.com/archives">https://www.dongwm.com/archives</a></p><h3 id="python-对并发编程的支持"><a class="markdownIt-Anchor" href="#python-对并发编程的支持"></a> python 对并发编程的支持</h3><ul><li><p>多线程：threading, 利用CPU和IO可以同时执行的原理，让CPU在IO的同时执行其他任务</p></li><li><p>多进程：multiprocessing, 利用多核CPU的能力，真正的并行执行任务</p></li><li><p>异步IO: asyncio, 在单线程利用CPU和IO同时执行的原理，实现函数异步执行</p></li><li><p>使用Lock对资源加锁，防止冲突访问</p></li><li><p>使用Queue实现不同线程/进程之间的数据通信，实现生产者-消费者模式</p><ul><li>改造爬虫，边爬虫-边解析</li></ul></li><li><p>使用线程池Pool/进程池Pool，简化线程/进程的任务提交，等待结束、获取结果</p></li><li><p>使用subprocess启动外部程序的京城，并进行输入输出交互</p></li></ul><h3 id="cpu密集型计算-io密集型计算"><a class="markdownIt-Anchor" href="#cpu密集型计算-io密集型计算"></a> CPU密集型计算、IO密集型计算</h3><ul><li>CPU密集型（CPU-bound）<ul><li>也叫计算密集型，是指I/O在很短的时间就可以完成，CPU需要大量的计算和处理，特点CPU占用率很高；</li><li>例如：压缩解压缩、加密解密、正则表达式搜索</li></ul></li><li>IO密集型（I/O bound）<ul><li>IO密集型指的是系统运作大部分的状况是CPU在等待I/O（硬盘/内存）的读写操作，CPU占用率仍然较低。</li><li>例如：文件处理程序（文件读取），网络爬虫程序（大量的下载）、多谢数据库程序</li></ul></li></ul><h3 id="多线程-多进程-多协程的对比"><a class="markdownIt-Anchor" href="#多线程-多进程-多协程的对比"></a> 多线程、多进程、多协程的对比</h3><ul><li>多进程Process(multiprocessing)<ul><li>优点：可以利用多核CPU并行运算</li><li>缺点：占用资源最多、可启动数目比线程少</li><li>适用于：CPU密集型计算</li></ul></li><li>多线程Thread(threadin)<ul><li>优点：相比进程，更轻量级，占用资源少</li><li>缺点：（Python多线程只能同时用一个CPU）<ul><li>相比进程：多线程只能并发执行，不能利用多CPU（GIL);</li><li>相比协程：启动数目有限制，占用内存资源，有线程切换开销</li></ul></li><li>适用于：IO密集型计算、同时运行的任务数目要求不多</li></ul></li><li>多协程Coroutine(asyncio)<ul><li>优点：内存开销最少、启动协程数量最多</li><li>缺点：支持的库有限制（aiohttp vs requests）、代码实现复杂</li><li>适用于: IO密集型计算、需要超多任务运行、但有现成库支持的场景</li></ul></li></ul><p>一个<strong>进程</strong>中可以启动N个<strong>线程</strong>，一个线程中可以启动N个<strong>协程</strong></p><h3 id="根据任务选择对应技术"><a class="markdownIt-Anchor" href="#根据任务选择对应技术"></a> 根据任务选择对应技术</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> CPU密集型：</span><br><span class="line">    使用多进程Multiprocessing</span><br><span class="line"><span class="keyword">elif</span> IP密集型：</span><br><span class="line">    <span class="keyword">if</span> 任务多 <span class="keyword">and</span> 有协程库支持 <span class="keyword">and</span> 协程实现复杂度不高：</span><br><span class="line">        使用多协程asyncio</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        使用多线程threading</span><br></pre></td></tr></table></figure><h2 id="python被吐槽慢头号嫌疑犯全局解释器锁gil"><a class="markdownIt-Anchor" href="#python被吐槽慢头号嫌疑犯全局解释器锁gil"></a> Python被吐槽慢，头号嫌疑犯，全局解释器锁GIL</h2><p>相比C/C++/JAVA,Python确实慢，在一些特殊场景下，Python比C++慢100~200倍</p><p>由于速度慢的原因，很多公司的基础架构代码依然用C/C++开发<br />比如各大公司阿里/腾讯/快手的推荐引擎、搜索引擎、存储引擎等底层对性能要求高的模块</p><p>Python速度慢两大原因：</p><ul><li>动态类型语言，边解释边执行，一个变量可以做数字、字符串或者列表，所以执行过程中都要检查变量类型，导致很慢</li><li>GIL无法利用多核CPU并发执行</li></ul><h3 id="gil"><a class="markdownIt-Anchor" href="#gil"></a> GIL</h3><p>全局解释器锁（Global Interpreter Lock, GIL），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行，即便在多核心处理上，使用GIL的解释器也只允许同一时间执行一个线程。</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/GIL.png" alt="http://www.dabeaz.com/python/UnderstandingGIL.pdf" /></p><p>GIL的存在，即使电脑有多核CPU，单个时刻也只能使用1个，相比并发加速的C/C++慢</p><h3 id="为什么有gil这个东西"><a class="markdownIt-Anchor" href="#为什么有gil这个东西"></a> 为什么有GIL这个东西</h3><p>python设计初期，为了规避并发问题引入了GIL，现在想去除去不掉了</p><p>为了解决多线程之间数据完整性和状态同步问题</p><p>python中对象的管理，是使用引用计数器进行的，引用数为0则释放对象</p><p>开始：线程A和线程B都引用了对象obj, obj.ref_num=2, 线程A和B都想撤销对obj的引用</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/GILreason.png" alt="whyGIL" /></p><p><strong>GIL确实有好处：简化了Python对共享资源的管理</strong></p><h3 id="如何规避gil带来的限制"><a class="markdownIt-Anchor" href="#如何规避gil带来的限制"></a> 如何规避GIL带来的限制</h3><ol><li>多线程threading机制依然是有用的，用于IO密集型计算<ul><li>因为I/O(read,write,send,recv,etc.)期间，线程会释放GIL，实现CPU和IO的并行，因此多线程用于IO密集型计算依然可以大幅度提升速度</li><li>但多线程用于CPU密集型计算时，只会更加拖慢速度</li></ul></li><li>使用multiprocessing 的多进程机制实现并行计算、利用多核CPU优势<ul><li>为了应对GIL，python提供了multiprocessing</li></ul></li></ol><h2 id="python多线程加速爬虫程序"><a class="markdownIt-Anchor" href="#python多线程加速爬虫程序"></a> python多线程加速爬虫程序</h2><h3 id="python创建多线程的方法"><a class="markdownIt-Anchor" href="#python创建多线程的方法"></a> python创建多线程的方法</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    do_craw(a,b)</span><br><span class="line"><span class="comment"># 怎样创建一个线程</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">t = threading.Thread(target=my_func, args=(<span class="number">100</span>,<span class="number">200</span>))</span><br><span class="line"><span class="comment"># 启动线程</span></span><br><span class="line">t.start()</span><br><span class="line"><span class="comment"># 等待结束</span></span><br><span class="line">t.join()</span><br></pre></td></tr></table></figure><h3 id="multi-threads-example"><a class="markdownIt-Anchor" href="#multi-threads-example"></a> multi-threads example</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># urls = [&quot;https://www.cnblogs.com/#p&#123;&#125;&quot;.format(page) for page in range(1,50+1)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(url,<span class="built_in">len</span>(r.text))</span><br><span class="line"></span><br><span class="line">craw(urls[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">## multi thread</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;single thread begin&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        craw(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;single thread end&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;multi-thread begin&quot;</span>)</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        threads.append(</span><br><span class="line">            threading.Thread(target=craw, args=(url,))</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;multi-thread end&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    single_thread()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;single thread cost: &quot;</span>, end-start, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line">    start = time.time()</span><br><span class="line">    multi_thread()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;multi-thread cost: &quot;</span>, end - start, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多组件的pipeline技术架构"><a class="markdownIt-Anchor" href="#多组件的pipeline技术架构"></a> 多组件的Pipeline技术架构</h3><p>复杂的事情一般不会一下子做完，而是会分很多中间步骤一步一步完成</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/pipeline.png" alt="pipeline" /></p><h3 id="多线程数据通信的quenequeue"><a class="markdownIt-Anchor" href="#多线程数据通信的quenequeue"></a> 多线程数据通信的quene.Queue</h3><p>queue.Queue可以用于多线程之间的线程安全的数据通信</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入类库</span></span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="comment"># 创建Queue</span></span><br><span class="line">q = queue.Queue()</span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">q.put(item)</span><br><span class="line"><span class="comment"># 获取元素</span></span><br><span class="line">item.get()</span><br><span class="line"><span class="comment"># 查看元素的多少</span></span><br><span class="line">q.qsize()</span><br><span class="line"><span class="comment"># 判断是否为空</span></span><br><span class="line">q.empty()</span><br><span class="line"><span class="comment"># 判断是否已满</span></span><br><span class="line">q.full()</span><br></pre></td></tr></table></figure><h3 id="代码编写实现生产者消费者爬虫"><a class="markdownIt-Anchor" href="#代码编写实现生产者消费者爬虫"></a> 代码编写实现生产者消费者爬虫</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># urls = [&quot;https://www.cnblogs.com/#p&#123;&#125;&quot;.format(page) for page in range(1,50+1)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">txtparse</span>(<span class="params">html</span>):</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    links = soup.find_all(<span class="string">&quot;a&quot;</span>, class_ = <span class="string">&quot;post-item-title&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [(link[<span class="string">&quot;href&quot;</span>], link.get_text()) <span class="keyword">for</span> link <span class="keyword">in</span> links]</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># urls = [&quot;https://www.cnblogs.com/#p&#123;&#125;&quot;.format(page) for page in range(1,50+1)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">txtparse</span>(<span class="params">html</span>):</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    links = soup.find_all(<span class="string">&quot;a&quot;</span>, class_ = <span class="string">&quot;post-item-title&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [(link[<span class="string">&quot;href&quot;</span>], link.get_text()) <span class="keyword">for</span> link <span class="keyword">in</span> links]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_craw</span>(<span class="params">url_queue: queue.Queue, html_queue: queue.Queue</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = url_queue.get()</span><br><span class="line">        html = craw(url)</span><br><span class="line">        html_queue.put(html)</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name, <span class="string">f&quot;craw <span class="subst">&#123;url&#125;</span>&quot;</span>, <span class="string">&quot;url_queue.size=&quot;</span>, url_queue.qsize())</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_parse</span>(<span class="params">html_queue: queue.Queue, fout</span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        html = html_queue.get()</span><br><span class="line">        results = txtparse(html)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            fout.write(<span class="built_in">str</span>(result) +<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(threading.current_thread().name, <span class="string">f&quot;results.size&quot;</span>, <span class="built_in">len</span>(results), <span class="string">&quot;html_queue.size=&quot;</span> , html_queue.qsize())</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_queue = queue.Queue()</span><br><span class="line">    html_queue= queue.Queue()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        url_queue.put(url)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=do_craw, args=(url_queue,html_queue), name=<span class="string">f&quot;craw<span class="subst">&#123;idx&#125;</span>&quot;</span>)</span><br><span class="line">        t.start()</span><br><span class="line">    fout = <span class="built_in">open</span>(<span class="string">&quot;02.data.txt&quot;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=do_parse, args=(html_queue, fout), name=<span class="string">f&quot;parse<span class="subst">&#123;idx&#125;</span>&quot;</span>)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><h2 id="线程安全"><a class="markdownIt-Anchor" href="#线程安全"></a> 线程安全</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>线程安全指某个函数、函数库在多线程环境中被调用时，能够正确地处理多个线程之间的共享变量，使程序功能正确完成。</p><p>由于现成的执行随时会发生切换，就造成了不可预料的结果，出现线程不安全。</p><blockquote><p>尤其是在远程调用或sleep的时候会经常出现</p></blockquote><p>例如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">account, amount</span>):</span></span><br><span class="line">    <span class="keyword">if</span> account.balance &gt;= amount:</span><br><span class="line">        account.balance -=amount</span><br></pre></td></tr></table></figure><p>如果是多线程，同时进行两笔取钱操作，线程切换过程中，系统依次先执行了两次判断语句，导致接下来都完成了取钱操作，就出现了问题。</p><blockquote><p>互斥访问；判断和执行语句捆绑为原子性；mysql幻读</p></blockquote><h3 id="lock用于解决线程安全问题"><a class="markdownIt-Anchor" href="#lock用于解决线程安全问题"></a> Lock用于解决线程安全问题</h3><blockquote><p>锁就是让任务排队;锁让判断和执行语句捆绑上锁同时执行；锁是数据共享的地方；</p></blockquote><p>方法一： try-finally 模式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock()</span><br><span class="line">lock.acquire()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># do something</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    lock.release()</span><br></pre></td></tr></table></figure><p>方法二： with模式</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="keyword">with</span> lock:</span><br><span class="line">    <span class="comment"># do something</span></span><br></pre></td></tr></table></figure><p>具体例子：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, balance</span>):</span></span><br><span class="line">        self.balance = balance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">account, amount</span>):</span></span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">if</span> account.balance &gt;= amount:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;取钱成功\n&quot;</span>)</span><br><span class="line">            account.balance -= amount</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;余额&quot;</span>, account.balance,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;取钱失败，余额不足&quot;</span>,<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    account = Account(<span class="number">1000</span>)</span><br><span class="line">    ta = threading.Thread(name=<span class="string">&quot;ta&quot;</span>, target=draw, args=(account, <span class="number">800</span>))</span><br><span class="line">    tb = threading.Thread(name=<span class="string">&quot;tb&quot;</span>, target=draw, args=(account, <span class="number">800</span>))</span><br><span class="line">    ta.start()</span><br><span class="line">    tb.start()</span><br></pre></td></tr></table></figure><h2 id="线程池"><a class="markdownIt-Anchor" href="#线程池"></a> 线程池</h2><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>新建线程系统需要分配资源、终止线程系统需要回收资源，如果可以重用线程，则可以减去新建/终止的开销。</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/threadperiod.png" alt="threadperiod" /></p><h3 id="使用线程池的好处"><a class="markdownIt-Anchor" href="#使用线程池的好处"></a> 使用线程池的好处</h3><ol><li>提升性能：因为减去大量新建、终止线程的开销，重用了线程资源</li><li>使用场景：适合处理突发性大量请求或需要大量线程完成任务、但实际处理时间较短</li><li>防御功能：能有效避免系统因创建线程过多，而导致系统负荷过大相应变慢等问题</li><li>代码优势：使用线程池的语法比自己新建线程执行更加简洁</li></ol><h3 id="使用线程池threadpoolexecutor改造爬虫程序"><a class="markdownIt-Anchor" href="#使用线程池threadpoolexecutor改造爬虫程序"></a> 使用线程池ThreadPoolExecutor改造爬虫程序</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">txtparse</span>(<span class="params">html</span>):</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    links = soup.find_all(<span class="string">&quot;a&quot;</span>, class_ = <span class="string">&quot;post-item-title&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [(link[<span class="string">&quot;href&quot;</span>], link.get_text()) <span class="keyword">for</span> link <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 用法一</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">    results = pool.<span class="built_in">map</span>(craw, urls)</span><br><span class="line">    results = <span class="built_in">list</span>(<span class="built_in">zip</span>(urls, results))</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment">## 用法二</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">    futures = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> url, html <span class="keyword">in</span> results:</span><br><span class="line">        future = pool.submit(txtparse, html)</span><br><span class="line">        futures[future] = url</span><br><span class="line">    <span class="comment">## 方法一：顺序执行</span></span><br><span class="line">    <span class="comment"># for future, url in futures.items():</span></span><br><span class="line">    <span class="comment">#     print(url, future.result())</span></span><br><span class="line">    <span class="comment">## 方法二:这个好，先结束先返回</span></span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">        url = futures[future]</span><br><span class="line">        <span class="built_in">print</span>(url, future.result())</span><br></pre></td></tr></table></figure><blockquote><p>note: 用法一：map函数，结果和入参顺序对应；用法二：future模式更强大，as_completed顺序不定。</p></blockquote><h2 id="在web服务中使用线程池加速"><a class="markdownIt-Anchor" href="#在web服务中使用线程池加速"></a> 在web服务中，使用线程池加速</h2><h3 id="web服务的架构以及特定"><a class="markdownIt-Anchor" href="#web服务的架构以及特定"></a> web服务的架构以及特定</h3><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/webframe.png" alt="webframe" /></p><p>web后台服务的特点</p><ol><li>web 服务对响应时间要求非常高，比如200MS返回</li><li>web 服务有大量的IO操作的调用，比如磁盘文件、数据库、远程API</li><li>web 服务经常需要处理几万人、几百万人的同时请求</li></ol><h3 id="使用线程池threadpoolexecutor加速"><a class="markdownIt-Anchor" href="#使用线程池threadpoolexecutor加速"></a> 使用线程池ThreadPoolExecutor加速</h3><p>使用ThreadPoolExecutor的好处</p><ol><li>方便的将磁盘文件、数据库、远程API的IO调用并发执行</li><li>线程池的线程数目不会无限创建（导致系统挂掉），具有防御功能</li></ol><h3 id="代码用flask实现web服务并实现加速"><a class="markdownIt-Anchor" href="#代码用flask实现web服务并实现加速"></a> 代码用Flask实现web服务并实现加速</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  flask</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_db</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;db result&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;file result&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_api</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api result&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    result_file = read_file()</span><br><span class="line">    result_db =read_db()</span><br><span class="line">    result_api = read_api()</span><br><span class="line">    <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;result_file&quot;</span>:result_file,</span><br><span class="line">        <span class="string">&quot;result_db&quot;</span>:result_db,</span><br><span class="line">        <span class="string">&quot;result_api&quot;</span>:result_api</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/getapitime.png" alt="responetime" /></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  flask</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_db</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;db result&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;file result&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_api</span>():</span></span><br><span class="line">    time.sleep(<span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api result&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    result_file = read_file()</span><br><span class="line">    result_db =read_db()</span><br><span class="line">    result_api = read_api()</span><br><span class="line">    <span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">        <span class="string">&quot;result_file&quot;</span>:result_file,</span><br><span class="line">        <span class="string">&quot;result_db&quot;</span>:result_db,</span><br><span class="line">        <span class="string">&quot;result_api&quot;</span>:result_api</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/getapitime1.png" alt="responetime1" /></p><h2 id="多进程multiprocessing-加速程序的运行"><a class="markdownIt-Anchor" href="#多进程multiprocessing-加速程序的运行"></a> 多进程multiprocessing 加速程序的运行</h2><p>有了多线程threading，为什么还要使用多进程multiprocessing?<br />如果遇到了CPU密集型计算，多线程反而会降低执行速度！</p><p><strong>multiprocessing模块就是python为解决GIL缺陷引入的一个模块，原理是用多进程在多CPU并行执行</strong><br /><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/whymultiprocess.png" alt="whymultiprocess" /></p><h3 id="多进程mutliprocessing知识梳理语法上二者十分相似"><a class="markdownIt-Anchor" href="#多进程mutliprocessing知识梳理语法上二者十分相似"></a> 多进程mutliprocessing知识梳理（语法上二者十分相似）</h3><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/threadingandmultiprocessing.png" alt="threadingandmultiprocessing" /></p><h3 id="代码对比单线程-多线程-多进程在cpu密集计算速度"><a class="markdownIt-Anchor" href="#代码对比单线程-多线程-多进程在cpu密集计算速度"></a> 代码对比单线程、多线程、多进程在CPU密集计算速度</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor, ThreadPoolExecutor</span><br><span class="line">PRIMES = [<span class="number">112272535095293</span>]*<span class="number">100</span> <span class="comment"># 这个数字很关键，不然很快就判断结束了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span> <span class="comment"># 判单是否是质数</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n %<span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    sqrt_n = <span class="built_in">int</span>(math.floor(math.sqrt(n)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, sqrt_n+<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i ==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_thread</span>():</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> PRIMES:</span><br><span class="line">        is_prime(num)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_thread</span>():</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(is_prime, PRIMES)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_process</span>():</span></span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(is_prime, PRIMES)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    single_thread()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;single thread cost:&quot;</span>, end-start, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    multi_thread()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;multi thread cost:&quot;</span>, end - start, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line">    start = time.time()</span><br><span class="line">    multi_process()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;multi process cost:&quot;</span>, end-start, <span class="string">&quot;seconds&quot;</span>)</span><br><span class="line"><span class="comment">### print结果</span></span><br><span class="line"><span class="comment"># single thread cost: 83.22900080680847 seconds</span></span><br><span class="line"><span class="comment"># multi thread cost: 64.15043830871582 seconds</span></span><br><span class="line"><span class="comment"># multi process cost: 24.825831413269043 seconds</span></span><br></pre></td></tr></table></figure><h3 id="flask服务中使用进程池加速"><a class="markdownIt-Anchor" href="#flask服务中使用进程池加速"></a> Flask服务中使用进程池加速</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span> <span class="comment"># 判单是否是质数</span></span><br><span class="line">    <span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n ==<span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n %<span class="number">2</span> ==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    sqrt_n = <span class="built_in">int</span>(math.floor(math.sqrt(n)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, sqrt_n+<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> n % i ==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/is_prime/&lt;numbers&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_is_prime</span>(<span class="params">numbers</span>):</span></span><br><span class="line">    numbers_list = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> numbers.split(<span class="string">&quot;,&quot;</span>)]</span><br><span class="line">    results = process_pool.<span class="built_in">map</span>(is_prime, numbers_list)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(<span class="built_in">dict</span>(<span class="built_in">zip</span>(numbers_list, results)))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    process_pool = ProcessPoolExecutor()</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><h2 id="python异步io实现并发爬虫"><a class="markdownIt-Anchor" href="#python异步io实现并发爬虫"></a> python异步IO实现并发爬虫</h2><p>单线程爬虫的执行路径</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/single_thread_spider.png" alt="single_thread_spider" /></p><p>协程：在单线程内实现并发</p><p><img src="https://ganshizhong.gitee.io/blogimages/Python/concurrentprogramming/single_thread_spider.png" alt="asyncio_spider" /></p><h3 id="python异步io库介绍asyncio"><a class="markdownIt-Anchor" href="#python异步io库介绍asyncio"></a> Python异步IO库介绍asyncio</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"><span class="comment"># 获取事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 定义协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;craw url: &quot;</span>, url)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">            result = <span class="keyword">await</span> resp.text()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;craw url: <span class="subst">&#123;url&#125;</span>, <span class="subst">&#123;<span class="built_in">len</span>(result)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 创建task列表</span></span><br><span class="line">tasks = [</span><br><span class="line">    loop.create_task(async_craw(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 执行爬虫事件列表</span></span><br><span class="line">start = time.time()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;use time seconds: &quot;</span>, end-start)</span><br><span class="line"><span class="comment">## print</span></span><br><span class="line"><span class="comment"># single thread cost:  11.99697756767273 seconds</span></span><br><span class="line"><span class="comment"># multi-thread cost:  1.426210880279541 seconds</span></span><br><span class="line"><span class="comment"># asyncio cost:  1.3427538871765137</span></span><br></pre></td></tr></table></figure><blockquote><p>async 表示这是一个协程，await表示这是一个IO</p></blockquote><blockquote><p>note: 要用在异步IO编程中，依赖的库必须支持异步IO特性;爬虫引用中，requests不支持异步，需要用aiohttp</p></blockquote><h2 id="在异步io中使用信号量控制爬虫并发度"><a class="markdownIt-Anchor" href="#在异步io中使用信号量控制爬虫并发度"></a> 在异步IO中使用信号量控制爬虫并发度</h2><p>信号量（Semaphore），又称为心好累、旗语，是一个同步对象，用于保持在0至指定最大值之间的一个技术之。</p><ul><li>当线程完成一次对该semaphore对象的等待（wait）时，该计数值减一；</li><li>当线程完成一次对semaphore对象的释放（release）时，计数值加一；</li><li>当计数值为0，则线程等待该semaphore对象不再能成功直至该semaphore对象变成signaled状态</li><li>semaphore对象的计数值大于0，为signaled状态；计数值等于0，为nonsignaled状态。</li></ul><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########## 使用方式1</span></span><br><span class="line">sem = asyncio.Semaphore(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># ...later</span></span><br><span class="line">asyncio <span class="keyword">with</span> sem:</span><br><span class="line">    <span class="comment"># work with shared resource</span></span><br><span class="line"><span class="comment">########## 使用方式2</span></span><br><span class="line">sem = asyncio.Semaphore(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># ...later</span></span><br><span class="line"><span class="keyword">await</span> sem.acquire() </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># work with shared resource</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    sem.release()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">urls = [<span class="string">f&quot;https://www.cnblogs.com/#p<span class="subst">&#123;page&#125;</span>&quot;</span> <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">semaphore = asyncio.Semaphore(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 获取事件循环</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 定义协程</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">async_craw</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> semaphore:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;craw url: &quot;</span>, url)</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">                result = <span class="keyword">await</span> resp.text()</span><br><span class="line">                <span class="keyword">await</span> asyncio.sleep(<span class="number">5</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;craw url: <span class="subst">&#123;url&#125;</span>, <span class="subst">&#123;<span class="built_in">len</span>(result)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建task列表</span></span><br><span class="line">tasks = [</span><br><span class="line">    loop.create_task(async_craw(url)) <span class="keyword">for</span> url <span class="keyword">in</span> urls</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 执行爬虫事件列表</span></span><br><span class="line">start = time.time()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;use time seconds: &quot;</span>, end-start)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并发编程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#并发编程&quot;&gt;&lt;/a&gt; 并发编程&lt;/h2&gt;
&lt;h3 id=&quot;并发编程程序提速方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#并发编程程序提速方法&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="python" scheme="http://shizhonggan.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://shizhonggan.github.io/tags/python/"/>
    
    <category term="thread" scheme="http://shizhonggan.github.io/tags/thread/"/>
    
    <category term="process" scheme="http://shizhonggan.github.io/tags/process/"/>
    
    <category term="coroutine" scheme="http://shizhonggan.github.io/tags/coroutine/"/>
    
  </entry>
  
  <entry>
    <title>tkinter快速入门</title>
    <link href="http://shizhonggan.github.io/2022/02/21/Python/pywebbakdevtest1/"/>
    <id>http://shizhonggan.github.io/2022/02/21/Python/pywebbakdevtest1/</id>
    <published>2022-02-21T08:39:04.000Z</published>
    <updated>2022-03-09T09:03:44.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-python类变量和实例变量的异同"><a href="#1-python类变量和实例变量的异同" class="headerlink" title="1. python类变量和实例变量的异同"></a>1. python类变量和实例变量的异同</h2><ul><li>类变量：可在类的所有实例之间共享的值（也就是说，它们不是单独分配给每个实例的）。</li><li>实例变量：实例化之后，每个实例单独拥有的变量。<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span>():</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    name = <span class="string">&#x27;stu&#x27;</span></span><br><span class="line">    <span class="comment"># age,name是类变量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,age,name</span>):</span></span><br><span class="line">        self.age = age</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="comment"># 访问实例变量(用self.age  self.name)</span></span><br><span class="line"></span><br><span class="line">student1 = student(<span class="number">18</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(student1.name) </span><br><span class="line"><span class="comment"># 打印实例变量，输出hello</span></span><br><span class="line"><span class="built_in">print</span>(student.name)  </span><br><span class="line"><span class="comment"># 打印类变量，输出stu</span></span><br></pre></td></tr></table></figure><h2 id="2-python中的协程如何实现的"><a href="#2-python中的协程如何实现的" class="headerlink" title="2. python中的协程如何实现的"></a>2. python中的协程如何实现的</h2></li></ul><ul><li>进程：进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动,进程是系统进行资源分配和调度的一个独立单位。每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</li></ul><p>　　2、线程</p><p>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,只拥有一点在运行中必不可少的资源(如程序计数器,一组寄存器和栈),但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p><p>　　3、协程</p><p>协程是一种用户态的轻量级线程，协程的调度完全由用户控制。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>首页 注册 登录<br>V2EX = way to explore<br>V2EX 是一个关于分享和探索的地方<br>现在注册<br>已注册用户请  登录<br>FinClip<br>DataPacket<br>CDN77<br>广告<br>FinClip<br>2022 FinClip 黑客马拉松，寻找「最强大脑」<br>广告<br>rapospectreV2EX  ›  程序员<br>2017 后端面试经历分享<br>  44     rapospectre · bluedazzle · 2017-03-20 11:36:07 +08:00 · 26188 次点击<br>这是一个创建于 1814 天前的主题，其中的信息可能已经有所发展或是发生改变。<br>0.背景<br>博主本人 2015 年毕业于郫县某 985 大学通信工程系，因为大学期间一直自己创业所以错过了大四秋招春招，毕业后又在北京继续创业一年，但在创业公司一直无法沉淀技术累积，于 16 年年底萌生进大公司学习的想法，于是从 16 年年底开始通过社招找工作。虽然大学就开始做研发，但无奈简历只看毕业工作经验，所以本人简历只有一年工作经验。</p><p>在此总结一篇文章给各位参考；</p><p>1.阿凡题<br>应该算是人生第一场面试，早上 11 点开始，公司是做 k12 在线教育相关业务，在五道口那边；</p><p>一面<br>前台登记后发了一套笔试题，开始写，主要都是 Python 基础知识，不算难，基本就是 可变对象不可变对象区别、 Python 垃圾回收机制之类的题目，有一两道编程题也很简单，最后有个根据题目设计数据表的问题也不难，搞定后等面试官开始二面；</p><p>二面<br>面试官好像是个主管，开始让做自我介绍，他在看我的笔试题，然后根据简历问了一些项目相关的问题以及简单的一些系统设计问题，之后大概问了问笔试题里一些问题和补充，感觉聊的比较开心，面试官也对之前我的经历比较感兴趣，于是去通知 CTO 进行三面；</p><p>三面<br>CTO 面里问题的广度和深度都很大，从服务器部署的相关知识到 Nginx 一些细节问题都有问到，不得不说问的还是比较全面的，印象最深的应该是这个问题：</p><p>浏览器的一个请求从发送到返回都经历了什么，讲的越详细越好<br>我大概讲下我的答案：</p><p>1 、先从网络模型层面：</p><p>client （浏览器）与 server 通过 http 协议通讯， http 协议属于应用层协议， http 基于 tcp 协议，所以 client 与 server 主要通过 socket 进行通讯；</p><p>而 tcp 属于传输层协议、如果走 https 还需要会话层 TLS 、 SSL 等协议； 传输层之下网络层，这里主要是路由协议 OSPF 等进行路由转发之类的。再向下数据链路层主要是 ARP 、 RARP 协议完成 IP 和 Mac 地址互解析，再向下到最底层物理层基本就是 IEEE 802.X 等协议进行数据比特流转成高低电平的的一些定义等等；</p><p>当浏览器发出请求，首先进行数据封包，然后数据链路层解析 IP 与 mac 地址的映射，然后上层网路层进行路由查表路由，通过应用层 DNS 协议得到目标地址对应的 IP ，在这里进行 n 跳的路由寻路；而传输层 tcp 协议可以说下比较经典的三次握手、四次分手的过程和状态机，这里放个图可以作为参考：</p><p>2 、应用层方面：</p><p>数据交换主要通过 http 协议， http 协议是无状态协议，这里可以谈一谈 post 、 get 的区别以及 RESTFul 接口设计，然后可以讲服务器 server 模型 epoll 、 select 等，接着可以根据实际经验讲下 server 处理流程，比如我： server 这边 Nginx 拿到请求，进行一些验证，比如黑名单拦截之类的，然后 Nginx 直接处理静态资源请求，其他请求 Nginx 转发给后端服务器，这里我用 uWSGI, 他们之间通过 uwsgi 协议通讯， uWSGI 拿到请求，可以进行一些逻辑， 验证黑名单、判断爬虫等，根据 wsgi 标准，把拿到的 environs 参数扔给 Django ， Django 根据 wsgi 标准接收请求和 env ， 然后开始 start_response ，先跑 Django 相关后台逻辑， Django 拿到请求执行 request middleware 内的相关逻辑，然后路由到相应 view 执行逻辑，出错执行 exception middleware 相关逻辑，接着 response 前执行 response middleware 逻辑，最后通过 wsgi 标准构造 response ， 拿到需要返回的东西，设置一些 headers ，或者 cookies 之类的，最后 finish_response 返回，再通过 uWSGI 给 Nginx ， Nginx 返回给浏览器。</p><p>谈完后 CTO 根据我说的一些细节提出了一些问题，最后当时就谈了 offer ， CTO 说不走 hr 那边了直接和我谈，比较意外的是 offer 给的比我自己要的还高 5k 。对于第一次找工作的我来说当时满心激动。</p><p>最后大概说说环境：公司在五道口一栋写字楼内容，规模还算比较大，听 CTO 谈做的事情也比较有意思，有机器学习、大数据等等 （ 主要是处理各种初高中学科的题目，涉及到文字识别深度学习等等，当然我如果进去肯定要从业务写起 ），包午餐、下午茶之类的其他我就不太清楚了，因为下午就走了，不过公司好像是每周六天班。公司发展感觉还是比较高速，感兴趣的同学可以去试试。</p><ol start="2"><li>学堂在线<br>公司也在五道口，清华科技园里， Google 前中国办公室对面的楼里 （ 好像现在搬到 Google 那里了 ）</li></ol><p>一面<br>一面面试官应该是个后端研发工程师，感觉有些羞涩，全程一直不看我，主要聊了一些简历里的项目经验，系统设计，然后问了几个简单的算法题和一些 Python 的基本知识，然后就去叫二面面试官了。</p><p>二面<br>二面面试官是部门主管，嗯，这次总算看着我跟我聊了，哈哈，感觉目光交流也很重要，同样问了一些系统设计的问题和经验问题，因为博主 Django 相关的经验还算比较丰富，感觉他们也主要是找业务研发，所以没什么意外就过了。</p><p>三面<br>hr 面，主要问了一些薪资期望，发展规划之类的，主要是聊天，然后就发了 offer 。</p><p>学堂在线主要是做慕课平台，并且是和国内各大高校合作，福利方面因为最后没有去所以不是特别了解，公司环境还是不错的。</p><p>3.果壳<br>果壳在国贸百朗园里，在园区最里面，不是很好找，一进去先发了一套面试题和一张登记表，登记表连父母家庭资料都要，不是很理解要面试者这些信息干什么，又不一定去你家，等入职再填不行吗？所以除了本人信息，其他我没填。（ 面了这么多家就果壳要填这个，还要填特别详细的信息，不能懂 ）</p><p>一面<br>面试题难度适中，不过涉及到的面比较多，还要写数据库查询语句等等，博主非科班，只大概自学过数据库，然后一直在用 orm ，毕业后就没怎么写过原生 SQL ，相关题目只能凭借记忆大概写了下，还有一道题是 用 O(1) 的复杂度实现一个 栈 的出栈入栈和返回 max 、 min 值的操作，其他就是一些 Python 基础和表设计题。</p><p>这里说下这道设计栈的题：</p><p>出入栈函数 O(1) 没什么问题，主要是 max 、 min 操作（ 博主找工作时没看过面试题目，只是刷了一些 LeetCode ，后来发现这道题很经典，网上很多答案）当时没遇到过这种需求，但是可以肯定想要时间复杂度下降，肯定是要用空间去换时间，所以当时有设计了额外的数据结构存 max min ，但当时设计的还是有问题，后面又和面试官讨论了一下，还是没有得出最好的方案，最后回去网上搜了下发现其实很简单，当时只差最后一步，感兴趣的同学可以看下：栈在 O(1) 时间内求 min</p><p>二面<br>面试官一上来就直接拿着笔试题开始一道一道问，嗯，连我叫什么都没让介绍，更别说介绍项目什么的，感觉有点懵逼，全程没一句废话，全是纯技术问题和算法，然后自己擅长的面试官感觉不太感兴趣，我不太熟悉的他很愿意追问，嗯，二脸懵逼，之后又问道 tcp 流量控制，当时直接说错给说了拥塞控制，面试官表示我 tcp 掌握的不好（ 确实是我的问题，回去之后又整个看了一遍 tcp ）。</p><p>最后又问了很多数据库底层的东西，博主完全没接触过，所以面试官表示下一轮面试官有事 （ 哈哈哈 ），接着问我有什么想问的，我问了两个问题面试官表示自己还有事。。。好吧，那就不聊了。</p><p>总结：数据库知识很重要，即使你投的是研发不是 dba ，你也一定要懂数据库底层的基本原理，至少要知道 索引原理、 MySQL 数据引擎等等，因为之后凡是博主挂的面试都有数据库的锅。</p><p>果壳环境看上去有些乱，但比较温馨，但实在不敢恭维面试的方式，所以挂了博主也没惋惜。其他方面就不太了解啦，因为根本没拿到 offer 。</p><p>4.Veeva<br>公司也在国贸附近，是一家给生物科技企业（ 药厂 ）做 crm 的外企 ( 不过国内的好像和国外母公司没什么关系，就是个单独的子公司 )，不算是互联网公司，但是薪资很给力。</p><p>一面<br>首先是 phone interview ， hr 大概问了问跳槽的原因，项目经验，发展规划等，然后发来 homework ，做完后提交；</p><p>二面<br>homework 比较简单，就是一个判断是否润年的函数，不过这里是有坑的，当题目很简单时，人家考验的就不是智商了，而是看你的编码能力，工程化能力及面向对象抽象能力，所以果断完整的写了个工程，加上完整的测试，然后提交之。</p><p>三面<br>hr 说技术同事看了 homework 感觉还是比较 ok 的，所以约面试，首先来的面试官好像就是个 leader ，问了很多 Python 和 Django 相关的基础知识和算法题，现场有个白版，直接在上面她出题，我写，然后她 review ，基本上就是 LeetCode easy 难度的题，没有太大问题。</p><p>四面<br>应该是个技术大牛，问了问经验开始系统设计，我记得当时是让设计一个短网址生成方案，有一些额外要求，比如不能按照字符顺序生成短网址，而是要随机生成，如何避免碰撞，如何最大效率利用所有空间。</p><p>具体方案可以看知乎，上面有人讨论过： 短链接是如何设计的</p><p>然后面试结束。</p><p>面试完后接到 hr 电话说技术同事感觉不错，问我有没有意向入职，但当时考虑还是想去互联网公司所以就拒掉了。不过 veeva 的薪资很给力，感兴趣的同学可以去看看。</p><p>5.知乎<br>博主的 dream company ，哈哈，去面试的时候特紧张。知乎在 768 创意园，环境很棒。</p><p>一面<br>一面面试官问了项目经历及一些个人信息后开始考基础，主要是面试官出题，然后我在纸上写代码，难度适中，因为面试的比较久了，记不太清楚全部题目，记得让手写了快排，然后 Python 相关基础知识，一些 LeetCode 题， tcp 相关知识， epoll 服务模型、 tornado 的一些原理 （ 可以看博主之前文章 tornado ioloop 分析 ）数据库知识 （ 坦白掌握不多 ）末尾问了下二分查找，一面就过了。</p><p>二面<br>面试官好像是商业化后台的主管？问了项目经验，问了经历，对我大学期间创业经历表示赞扬，但毕业后又创业一年表示不满意（ 不是很明白为什么 ），之后开始问一些系统设计相关题目，印象比较深的是设计微信抢红包的构架，嗯，当时根据自己的见解说了一套系统和注意的点以及分配红包的算法，感觉面试官应该不太满意。回去后看了看网上，还真有写，果断研读了一发： 微信红包构架设计.</p><p>后面又聊了一些系统设计相关的内容，然后让我等等。</p><p>三面<br>等了半个小时，期间看到前两面面试官一直在和 hr 讨论，应该是要不要我的问题，半个小时后 hr 来跟我聊了聊规划和项目以及为何来知乎，然后就回去周五前给回复。</p><p>到此大概确定应该要我的可能性不大，应该是当做备胎了。 这里自己的问题主要是系统设计方面当时并没有准备，另一方面数据库这块明明果壳问到了但是没有重视起来。最后，年底出去找工作还是要谨慎，很多大点公司没什么招聘需求，除非特别优秀。</p><p>最后，周五没有收到消息，基本确定挂了，果然在下周周一的时候收到了拒信，这点要赞一下，至少有明确的拒信，不像一些其他公司，嗯，就不明说了。</p><p>知乎氛围觉得还是挺赞的， 福利也很好，包三餐，不加班，嗯，不多说了，都是泪。 最近知乎开始大量招人了，大家可以去试试哦，替我完成我的 dc 梦，哈哈哈。</p><p>6.春雨医生<br>春雨医生在知乎隔壁，真的是紧隔壁，环境也不错~</p><p>一面<br>照例进行自我介绍，然后问项目经验，开始纸上写代码，不过这里要赞一下春雨，面试题都非常接地气，全是根据实际项目里的问题进行编码，比如有个给医生和病人聊天记录分组提醒的题目，都是类似的实际场景题目，完全没有那种纯算法题目，之后又聊了一些 Python Django 基础相关的东西，顺利进入二面。</p><p>二面<br>问了一些项目信息，然后开始系统设计，没记错的话应该是设计一个类似 QQ 的聊天工具，要求有群，并且可以发送图片、语音等各类消息，群管理员可以进行群管理等等。后面又问道数据库，直言数据库基础掌握的比较少，面试官也没有为难我。</p><p>三面<br>三面的时候到晚上饭点了， hr 姐姐超级好，带我去外面中餐馆点菜吃饭，回来后 CTO 面试， 考了阿凡题 CTO 问过的问题： 浏览器的一个请求从发送到返回都经历了什么</p><p>于是本人又根据上面那个流程讲了一遍，接着又问了问自己的发展规划和期望，然后我问了问春雨相关的一些问题，面试结束。</p><p>隔天收到了 offer ， 请我吃饭的小姐姐发给我的，哈哈，但是由于年前无法到岗，只能拒掉了。</p><p>总体讲，春雨环境也很不错，但其他福利我也没有问，所以其他不太清楚咯，有兴趣的同学可以去试试。</p><ol start="7"><li>360<br>360 在酒仙桥，最不靠谱的面试。。。</li></ol><p>直接通过拉钩邀请第二天早上面试，当时已经下午五点。完全没打电话发短信，接到邮件的我一脸懵逼，于是主动打电话过去确认，得到肯定后第二天做两个多小时车赶往望京。 （ 我住在八宝山这块 ）</p><p>一面<br>前台不让进，让通知面试的人来接，等了会儿面试官来接我，然后七绕八绕不知道绕道哪去给了我一份笔试题，让我做，着重强调不要看手机 （ 本来就没打算看好嘛，我坐的头顶有个摄像头，你让我怎么看，哈哈哈 ）写完让我打他电话，然后他就闪了。</p><p>我一看题目，除了前三道是 Python 之后全是 Linux 基础题，当时心里想：不亏是做安全的啊，要求就是不一样，然而博主半吊子 Linux 水平只会一些常用的命令，笔试题里的高端用法实在是臣妾不会做啊，于是本着诚实的原则做完会做的打了电话。</p><p>二面<br>面试官来没有让自我介绍，直接对着题目开始问 （ 我的内心已经产生了抵触感，和果壳一样 ）。第一题是个 Python 改错题，面试官问为何这样改，我大概讲了下，然后是讲了下 lambda 表达式并提供编程例子，面试官看完也没说什么，接着是一个用两个队列模拟栈，写实现代码，也没有太大问题，只是面试官也没有看代码，就是问了我怎么实现。</p><p>接着到了 Linux 部分，基本都不会，会的也只能写出简单的命令，面试官直言：你这个笔试题做的不好啊。怎么都不会 （ 确实有我的问题， Linux 基础不好，但是直接否定了前面其他部分有点冤啊 ）</p><p>接着问了一些项目经验，看到我的开源项目 djanog-simple-serializer 问这是干嘛的，然后我说了下是序列化解决方案，面试官说：序列化不是很简单嘛？（ 我也没说难啊大兄弟，只是其他的没有好用的自己写了个嘛 ）接着面试官问了我一句让我十脸懵逼的话，作为一个不懂 Python 的人，你能给我简单讲讲 Django 和你做的东西吗？当时我的内心全是黑人问号脸， wtf ？不懂 Python ？那你招 Python ？ 怎么面试啊大兄弟，虽然我知道其他语言用的 6 写 Python 也没问题，但是招进来就要写业务你怎么也得找个有相关经验的面试吧，这下我明白为啥之前 Python 部分面试官不怎么看了。 此刻我只想赶紧离开了，于是就说感觉招聘需要和我不太一致，就不耽误时间了。</p><p>好吧，应该我算是遇到个例，请大家不要对 360 产生偏见。</p><ol start="8"><li>今日头条<br>今日头条在中航广场，人民大学旁边，不得不说，是我面试过离我最近的公司，头条大楼很霸气。发展也很迅速。</li></ol><p>一面<br>面试前一天晚上莫名失眠，真的是一宿没睡，睁眼到天亮，然后一脸懵逼的去面试，到了头条前台我勒个去，从没见过这么多人来面试，大厅做不下了，当时心里想：完蛋，这么多人，竞争得多激烈，昨晚还失眠，血崩。</p><p>在前台签到，领了候选人的牌子，等了一会儿就叫到了我，由于面试的人实在太多，我实在 -1 楼食堂进行的面试，一面面试官是广告投放部门的工程师，先自我介绍，谈创业经历，问了 redis 用法及原理 （ 前面几次问到数据库的前车之鉴，博主特意狠狠看了下各种数据库的基本原理 ），然后根据我说使用 hash table 的经验，提了一个分布式 redis 使用 hash 的潜在问题，当时没有想出来，面试官提醒了下大概说到了点子上，主要是分布式机器 hash 后可能存在储存分配不均匀问题。然后 hash 表又问了冲突解决方案，主要是拉链法和进位法，之后聊了 tcp ，没什么问题。 问了排序算法的最小时间复杂度及原因。接着出了一道费那波数列的题，要求在常数时间复杂度内计算任意 fib(n) 当时可能没听清，估计没睡的原因，听成了常数时间复杂度，向面试官确认是常数时间复杂度 （ 面试官可能没听清我说的，以为我说的空间复杂度 ）于是苦思冥想无果，面试官提示动态规划，于是开始推导转移方程，最后面试官说没那么复杂，这时一对才发现我们理解岔了。其实很简单：</p><p>def fib(n):<br>    a, b = 0, 1<br>    for x in xrange(n):<br>        a, b = b, a + b<br>    return b<br>一面问题结束，在我写题的时候面试官看了我的博客和 GitHub ，表示满意 （ 有点惊讶，第一次有面试官看我博客和 GitHub ，虽然简历上有，但从没有人说看过 ），然后又带我把一面所有问题过了一遍，我不清楚的地方都完整的给出了答案，没见过这么好的面试官！！不知道他们给我多少分，我给他们满分！</p><p>二面<br>二面面试官是头条广告后台组主管，对我的创业经历很感兴趣，问了很多相关问题，然后看到我的开源项目又问了一些问题，然后提了一个很有意思的题目，在极端情况下，系统缓存全部失效，该如何防止流量全部打到数据库上，当时从很多方面考虑但是感觉面试官没有非常满意，不过也算是答到了点子上，也就算过了。回去后特意看了看，缓存失效的解决方案，感兴趣的同学自行搜索 “缓存重建”。</p><p>然后问了问一些项目相关的经验和解决方案，出了一道单链表逆置的题目 （ 和面试官透露非科班，没有出很难的题目 ），然而当时大脑基本处于停转状态，太困了，最后写出来有个 bug ，其实题目很简单，回去稍微想了下就写了出来：</p><p>def revese(node):<br>    p = node<br>    cur = node.next<br>    p.next = None<br>    while cur:<br>        tmp = cur.next<br>        cur.next = p<br>        p = cur<br>        cur = tmp<br>    return p<br>面试官表示 coding 能力需要加强，当时也不好说自己没睡觉，就直接说确实能力需要加强。面试关说让我等等去找下一轮面试官，等了一会儿告诉我下个面试官不在，当时觉得我是挂了 （ 结果是面试官真的不在 ），面试官好像看出了我的想法，重复了一句面试官真的不在。让我回去，稍后 hr 约下次面试时间。</p><p>三面<br>三面是一周后的下午 6 点，这次终于来到了面试室，里面有一块白版，三面面试官是广告大组的 leader ，进来没有再考基础题，问过经历后出了五道系统设计题，于是开始在白板上写，大概记得有多端登录管理、二维码登录等等一些设计，要求设计出系统结构，相关数据库和表，博主设计完后给面试官讲了一遍，感觉面试官比较满意，也没再问其他的，直接去叫下一轮面试官了。</p><p>四面<br>四面面试官是头条 data 部门的 vp ，感觉人超级和善，进来直接跟我说一起去吃饭吧，刚好体验下头条食堂，然后，第四轮面试是在饭桌上进行的，主要谈了谈我的项目经验和发展方向以及为何来头条，最后吃完饭面试官说本来这一轮也会考技术，但是感觉聊得不错，就不聊技术了，让我回去等 hr 电话。（ 头条食堂真的不错呀，只是当时没好意思多打，哈哈 ）</p><p>五面<br>hr 电话聊了聊个人发展及规划，然后确定了薪资，就发了 offer ~~</p><p>头条环境非常不错，包三餐，自助食堂，无限水果零食还有下午茶，晚上 10 点后打车报销，入职发 mac ， 住公司周围房补，大小周加班有加班费等等，总之福利非常多 （ 为何我知道的这么多 ）还是推荐大家来哦。</p><p>总结<br>最后，博主选择了头条的 offer 。（ 已经找到当初面试我的大神们，哈哈，开心 ）</p><p>从去年底找工作找到今年节后，终于找到一个满意的 offer ，曾经也纠结过，感觉自己高不成低不就，有段时间甚至拒绝出去找工作。</p><p>很多大公司社招都是三年经验起，所以像博主这种毕业一年的人在没有内推的情况下参加社招非常尴尬，在这里奉劝各位学弟学妹，一定要抓住校招的机会啊！！社招跟你竞争的可不光是你们同级的人。</p><p>找到工作后偶然发现一本神书 《剑指 offer 》我面试过基本所有问题上面都有，推荐大家一定过一遍（ 要是早点看到就好了，哈哈 ）</p><p>这里还有博主当时刷过的 LeetCode <a href="https://github.com/bluedazzle/leetcode_python">https://github.com/bluedazzle/leetcode_python</a> ，可以参考一下，之后有时间博主也打算一直刷下去。</p><p>平时一定要注意多积累，有条件的情况下尽量自己多写一些自己的项目，这样面试会有很大的加分，比如博主之前写过的小程序：式神猎手 ( <a href="https://www.rapospectre.com/blog/create-an-onmyoji-weapp-in-24-hours">https://www.rapospectre.com/blog/create-an-onmyoji-weapp-in-24-hours</a> ) 在面试中就很有益处。</p><p>还没完<br>说到抓住校招，今日头条春招刚刚开始，学弟学妹抓紧机会，本人可以内推哦：</p><p>今日头条春季校园招聘火热进行中！ [面向对象] ： 2017 年应届毕业生和 2018 年应届暑期实习生 [职位方向] ：研发、产品、运营、销售、投资、 HR 等 [春季招聘 - 2017 届] ： <a href="https://job.toutiao.com/campus/spring">https://job.toutiao.com/campus/spring</a> [暑期实习 - 2018 届] ： <a href="https://job.toutiao.com/campus/summer">https://job.toutiao.com/campus/summer</a> [投递时间] ： 3 月 9 日 - 4 月 30 日 [头条邀请码] ： iUGUiF （不区分大小写）</p><p>登录相关网址输入我的头条邀请码即可成功内推哟，快到碗里来！！</p><p>社招的同学也别灰心，只要你找得到我的邮箱（ 应该挺好找的 ），简历发给我，帮你内推~</p><p>当然，对于以上其他家公司，只要我拿到 offer 的公司我都可以帮大家推哟。</p><p>面试过程中还去过几家创业公司聊过，发展也很好，比如 青橙科技、视频帮等等，如果大家感兴趣，我都可以帮大家直推 CTO 。</p><p>原文地址 <a href="https://www.rapospectre.com/blog/2017-backend-interview-share">https://www.rapospectre.com/blog/2017-backend-interview-share</a></p><p>作者：rapospectre</p><p>第 1 条附言  ·  2017-03-20 12:27:24 +08:00<br>fib 数列那里是常数空间复杂度哈，文中写错了。 感谢 @razrlele 指正<br> 面试 Python 博主 官170 条回复  •  2020-10-01 21:47:50 +08:00<br>1  2<br>1<br>❮    ❯<br>everhythm            1<br>everhythm      2017-03-20 11:45:21 +08:00<br>郫县群众握爪，同在帝都<br>metrue            2<br>metrue      2017-03-20 11:50:12 +08:00 via iPhone<br>很详细，可是不知道这样泄漏面试内容是否不妥。<br>ljcarsenal            3<br>ljcarsenal      2017-03-20 11:53:02 +08:00<br>真厉害<br>razrlele            4<br>razrlele      2017-03-20 11:58:30 +08:00 via iPhone<br>你写的那个 fib 应该是 O(n)时间复杂度吧，常数时间复杂度应该是套公式法吧？<br>rapospectre            5<br>rapospectre<br>OP<br>   2017-03-20 12:06:51 +08:00<br>@razrlele 是的，面试要求的是要常数空间复杂度，不是时间复杂度哈。<br>rapospectre            6<br>rapospectre<br>OP<br>   2017-03-20 12:07:53 +08:00<br>@metrue 已经省略了很多关键细节，很多题都没写，都直接拿 LeetCode 代替了，只是写了几个比较有意思的题目。<br>rapospectre            7<br>rapospectre<br>OP<br>   2017-03-20 12:08:28 +08:00<br>@everhythm 哈哈，想念豆瓣不<br>rapospectre            8<br>rapospectre<br>OP<br>   2017-03-20 12:08:47 +08:00<br>@ljcarsenal 客气啦<br>xiahei            9<br>xiahei      2017-03-20 12:25:09 +08:00<br>邀请码已用，简历已投，谢谢楼主！！<br>lichao0x7cc            10<br>lichao0x7cc      2017-03-20 12:43:21 +08:00<br>非常感谢楼主的分享。<br>iloveyou            11<br>iloveyou      2017-03-20 12:57:04 +08:00<br>请问能大概透漏下薪资不，本人最近也打算去帝都发展<br>guoer            12<br>guoer      2017-03-20 13:02:01 +08:00 via iPhone<br>写得很好<br>byebyejude            13<br>byebyejude      2017-03-20 13:03:11 +08:00 via Android<br>又是你电道友。。<br>zhihhh            14<br>zhihhh      2017-03-20 13:08:35 +08:00<br>哈哈 楼主的头像果然在哪儿都一样，超高辨识度。。<br>WangYanjie            15<br>WangYanjie      2017-03-20 13:09:51 +08:00<br>“浏览器的一个请求从发送到返回都经历了什么，讲的越详细越好”<br>另一种思路： Client-&gt;DNS-&gt;Load Balancer-&gt;Web Server<br>Amayadream            16<br>Amayadream      2017-03-20 13:13:45 +08:00 via iPhone<br>写的好详细，楼主也好厉害<br>whiler            17<br>whiler      2017-03-20 13:18:54 +08:00<br>看来博主很少逛河畔，握爪<br>HLT            18<br>HLT      2017-03-20 13:26:23 +08:00<br>看完了</p><p>超赞</p><p>满满的干货</p><p>言语诙谐</p><p>祝一直好运<br>cxyfreedom            19<br>cxyfreedom      2017-03-20 13:31:21 +08:00<br>最早是看 tornado 搜到楼主的，真心不错<br>iloveyou            20<br>iloveyou      2017-03-20 13:40:22 +08:00<br>请问楼主是在哪个平台找的工作？智联还是其他？<br>welkinzh            21<br>welkinzh      2017-03-20 13:41:33 +08:00 via Android<br>学习了 谢谢楼主<br>rapospectre            22<br>rapospectre<br>OP<br>   2017-03-20 13:49:36 +08:00<br>@xiahei 不客气！<br>rapospectre            23<br>rapospectre<br>OP<br>   2017-03-20 13:50:14 +08:00<br>@lichao0x7cc 客气啦<br>lxy            24<br>lxy      2017-03-20 13:51:53 +08:00<br>前段时间找 Django 序列化方案看过楼主的项目，可惜不支持 Python3 ……<br>我一直奇怪应该经常用到的功能怎么在 Django 中就这么麻烦。找了一圈感觉貌似 SqlAlchemy 不错，然而 Django 换 ORM 很麻烦，项目做了一半又不能换 Flask 。最后只能用 Django 内建序列化然后自己手动过滤解决，就是代码丑了点。<br>pathbox            25<br>pathbox      2017-03-20 13:54:07 +08:00 via Android<br>lz 面的是 Python 后端<br>Yc1992            26<br>Yc1992      2017-03-20 13:54:39 +08:00<br>楼主透露下拿到的几个 offer 都有多少呗，说个区间也行呀。<br>rapospectre            27<br>rapospectre<br>OP<br>   2017-03-20 13:54:49 +08:00<br>@iloveyou 就是招聘网站上的薪资差不多哈，具体不便透露。<br>rieuse            28<br>rieuse      2017-03-20 13:55:03 +08:00 via Android<br>看完了，必须点个赞！有帮助<br>rapospectre            29<br>rapospectre<br>OP<br>   2017-03-20 13:55:21 +08:00<br>@guoer 谢谢夸奖<br>rapospectre            30<br>rapospectre<br>OP<br>   2017-03-20 13:55:50 +08:00<br>@byebyejude 道友好<br>rapospectre            31<br>rapospectre<br>OP<br>   2017-03-20 13:56:48 +08:00<br>@zhihhh 哈哈哈哈，我是这只绿狗的米弟<br>rapospectre            32<br>rapospectre<br>OP<br>   2017-03-20 13:57:34 +08:00<br>@WangYanjie 是的，其实把这一套说明白面试官就会很满意了<br>rapospectre            33<br>rapospectre<br>OP<br>   2017-03-20 13:57:48 +08:00<br>@Amayadream 谢谢啦<br>rapospectre            34<br>rapospectre<br>OP<br>   2017-03-20 13:58:15 +08:00<br>@HLT 谢谢祝福！！<br>rapospectre            35<br>rapospectre<br>OP<br>   2017-03-20 13:58:48 +08:00<br>@cxyfreedom 之后还会继续写，谢谢支持！<br>rapospectre            36<br>rapospectre<br>OP<br>   2017-03-20 13:59:26 +08:00<br>@iloveyou 拉钩 boss 指聘以及自己去官网投<br>rapospectre            37<br>rapospectre<br>OP<br>   2017-03-20 13:59:47 +08:00<br>@welkinzh 客气啦<br>jppxhz01            38<br>jppxhz01      2017-03-20 14:00:41 +08:00<br>学长好～<br>rapospectre            39<br>rapospectre<br>OP<br>   2017-03-20 14:00:53 +08:00<br>@lxy 我也很诧异，所以自己写了一套，你需要 py3 支持是嘛？ 好的，最近我更新一下，做好 @ 你哈。<br>fancy20            40<br>fancy20      2017-03-20 14:07:48 +08:00<br>斐波那契数列那个估计期望你能用矩阵快速幂，时间复杂度是 O(logn)<br>iamzhuyi            41<br>iamzhuyi      2017-03-20 14:09:48 +08:00<br>不错 收藏了<br>ansheng            42<br>ansheng      2017-03-20 14:14:34 +08:00<br>被露珠面过<br>AdamChrist            43<br>AdamChrist      2017-03-20 14:19:21 +08:00<br>工作好几年了..楼主说的一些问题我好像都不懂…好惭愧…<br>例如 http 里面具体是怎么样的流程…楼主平时有用到这些知识?<br>imink            44<br>imink      2017-03-20 14:22:53 +08:00<br>和楼主经历差不多，也是本来校招的时候，错过了，然后创业（不过我就创业 3 个月，老板不靠谱，就做不下去了，但是自己积累了技术积淀，而且 leetcode 刷题总体上没断）。开始认真找工作的时候就很尴尬了，对于我这去年九月份毕业的人来说，只能硬着头皮投社招，或者一些校招的补招。恭喜楼主找到工作！我也继续加油！<br>imink            45<br>imink      2017-03-20 14:23:33 +08:00<br>好奇楼主为什么没有投递 bat 大厂的社招？<br>robinlovemaggie            46<br>robinlovemaggie      2017-03-20 14:24:55 +08:00<br>想到当年高考一考定终身，再看现在的社会招聘一面二面…… N 面，还是一样的”理论+答题实践“，我们永远都是那个必须能给出正确答案的人，不知为何心生一种隐隐的悲哀……<br>starryin            47<br>starryin      2017-03-20 14:30:12 +08:00<br>果壳还是一如既往之烂啊，当年被果壳从外地约到北京面试，连一家外企报销机票+住宿面试的机会都没等，提前跑到北京，结果约定面试时间到后面试官迟到 20 分钟，面试刚开始就被人叫去开会，然后对通知的人说给我 20 分钟我把这个人面完，结束后还告诉我回去补做一套果壳的笔试题<br>fxxkgw            48<br>fxxkgw      2017-03-20 14:32:33 +08:00<br>建议 LZ 少说点<br>记得知乎上有个大牛拿到暴雪的 offer 然后洋洋洒洒写一堆最后 offer 会收回了。。<br>quxiangxuanqxx            49<br>quxiangxuanqxx      2017-03-20 14:58:37 +08:00<br>@fxxkgw 那个是真的透露太多了，基本上就差一个监控录像和自己的旁白介绍了。。。。炫耀太过了。。。<br>misaka19000            50<br>misaka19000      2017-03-20 15:04:17 +08:00<br>@fxxkgw 哈哈，暴雪那哥们，也是惨<br>rapospectre            51<br>rapospectre<br>OP<br>   2017-03-20 15:23:18 +08:00<br>@pathbox 恩恩，是哒<br>rapospectre            52<br>rapospectre<br>OP<br>   2017-03-20 15:25:20 +08:00<br>@Yc1992 就是网站上的 15-30 呀<br>rapospectre            53<br>rapospectre<br>OP<br>   2017-03-20 15:26:08 +08:00<br>@rieuse 谢谢支持<br>rapospectre            54<br>rapospectre<br>OP<br>   2017-03-20 15:26:36 +08:00<br>@jppxhz01 学弟好，快到碗里来~<br>rapospectre            55<br>rapospectre<br>OP<br>   2017-03-20 15:27:40 +08:00<br>@fancy20 这个高端了，面试的时候能写出来估计面试官会很满意的<br>rapospectre            56<br>rapospectre<br>OP<br>   2017-03-20 15:28:01 +08:00<br>@iamzhuyi 谢谢呀<br>rapospectre            57<br>rapospectre<br>OP<br>   2017-03-20 15:28:45 +08:00<br>@ansheng 你也加油呀~<br>rapospectre            58<br>rapospectre<br>OP<br>   2017-03-20 15:29:34 +08:00<br>@AdamChrist 会用到，看一些框架源码的时候，需要了解底层的处理逻辑哈<br>rapospectre            59<br>rapospectre<br>OP<br>   2017-03-20 15:30:49 +08:00<br>@imink BAT 社招 三年经验起，要么有人能内推你，要么简历造假。头条发展很迅速呀，对于我现在的发展来讲可能更合适一些<br>rapospectre            60<br>rapospectre<br>OP<br>   2017-03-20 15:31:43 +08:00<br>@robinlovemaggie 哎，没办法，竞争压力过大时只能采取这种相对公平的方式进行角逐了<br>repus911            61<br>repus911      2017-03-20 15:32:18 +08:00<br>小公司躺枪。。。发给面你的人看看去<br>rapospectre            62<br>rapospectre<br>OP<br>   2017-03-20 15:32:18 +08:00<br>@starryin 这个确实有点坑<br>congeec            63<br>congeec      2017-03-20 15:33:04 +08:00 via iPhone<br>@misaka19000 不能更惨了<br>rapospectre            64<br>rapospectre<br>OP<br>   2017-03-20 15:34:08 +08:00<br>@fxxkgw 谢谢大兄弟提醒呀，关于新东家的面试信息你有没有发现除了那两道简单的编程题，我都只说了问题没说答案，哈哈哈。<br>rapospectre            65<br>rapospectre<br>OP<br>   2017-03-20 15:36:02 +08:00<br>@repus911 小公司也有小公司的好啊，把握机会。你认识面我的人，厉害。<br>johnny23            66<br>johnny23      2017-03-20 15:39:20 +08:00 via iPhone<br>清水河小师弟<br>yuzhiquan            67<br>yuzhiquan      2017-03-20 15:44:09 +08:00<br>爆炸了，工作三年的人表示很多不会的啊<br>dreamwar            68<br>dreamwar      2017-03-20 15:45:38 +08:00<br>这帖子强<br>Antidictator            69<br>Antidictator      2017-03-20 15:46:57 +08:00<br>Q ：为什么来知乎？</p><p>A ：因为上班可以刷啊。<br>artandlol            70<br>artandlol      2017-03-20 15:47:21 +08:00 via Android<br>k12 就那几家 让猜猜看<br>jz361            71<br>jz361      2017-03-20 15:56:11 +08:00<br>非常感谢楼主，已经收藏了<br>a87150            72<br>a87150      2017-03-20 15:58:13 +08:00<br>难得的好文<br>Michaelssss            73<br>Michaelssss      2017-03-20 16:03:45 +08:00<br>郫县电子竞技高中的校友好~<br>v2orz            74<br>v2orz      2017-03-20 16:27:59 +08:00<br>有帮助，感谢楼主<br>话说一年经验问这么多，我等偏远地方根本没人可用了……苦<br>缓存失效那一块我得再深入研究一下<br>MushishiXian            75<br>MushishiXian      2017-03-20 16:46:43 +08:00<br>很赞的体会分享,谢谢楼主<br>init            76<br>init      2017-03-20 17:24:27 +08:00<br>楼主你好 我最近也在找工作 前一段时间一直在面试现在处于不想找工作的状态很烦，主要是不想干通讯这一行业了想回到互联网公司，悲催的是手头上的项目更多的是偏底层的，导致找工作颇为坎坷，现在都不知道怎么办了<br>KIDJourney            77<br>KIDJourney      2017-03-20 17:32:16 +08:00<br>讲道理。。我刷题比你多， github 和你差不多，之前在饿厂和美团实习，独立搞服务，竞赛也有成绩，而且我今年才毕业。</p><p>但 我 连 头 条 的 面 试 资 格 都 没 有。</p><p>悲伤的故事。<br>留个联系方式，让我们在寒冷的北京面个基。。。<br>rapospectre            78<br>rapospectre<br>OP<br>   2017-03-20 17:39:03 +08:00<br>@johnny23 学长好~<br>rapospectre            79<br>rapospectre<br>OP<br>   2017-03-20 17:39:29 +08:00<br>@yuzhiquan 我也是临时抱佛脚哈<br>rapospectre            80<br>rapospectre<br>OP<br>   2017-03-20 17:39:43 +08:00<br>@dreamwar 谢谢支持<br>rapospectre            81<br>rapospectre<br>OP<br>   2017-03-20 17:40:09 +08:00<br>@Antidictator 哈哈，那在头条不也可以刷<br>2owe            82<br>2owe      2017-03-20 17:54:04 +08:00<br>赞，细节和原理并重。<br>rapospectre            83<br>rapospectre<br>OP<br>   2017-03-20 17:59:45 +08:00<br>@artandlol 已经写了公司名了哟<br>daozhihun            84<br>daozhihun      2017-03-20 17:59:55 +08:00 via Android<br>赞一个，谢谢楼主分享。顺便问下头条招 Java 么？<br>rapospectre            85<br>rapospectre<br>OP<br>   2017-03-20 18:00:06 +08:00<br>@jz361 感谢支持<br>rapospectre            86<br>rapospectre<br>OP<br>   2017-03-20 18:00:19 +08:00<br>@a87150 谢谢夸奖~<br>rapospectre            87<br>rapospectre<br>OP<br>   2017-03-20 18:01:15 +08:00<br>@Michaelssss 道友好<br>rapospectre            88<br>rapospectre<br>OP<br>   2017-03-20 18:01:58 +08:00<br>@v2orz 面试都不是让你造火箭这种类型嘛，啥都要问，我也很方<br>rapospectre            89<br>rapospectre<br>OP<br>   2017-03-20 18:02:16 +08:00<br>@MushishiXian 谢谢支持<br>stanfordwang            90<br>stanfordwang      2017-03-20 18:03:04 +08:00 via Android<br>谢谢分享<br>rapospectre            91<br>rapospectre<br>OP<br>   2017-03-20 18:03:15 +08:00<br>@init 偏底层试试 C++ 的职位？ 我也不是很了解哈，建议你看看我推荐的书和一些知识，找工作还是挺有帮助的<br>rapospectre            92<br>rapospectre<br>OP<br>   2017-03-20 18:04:28 +08:00<br>@KIDJourney 这么厉害！我可以帮你内推啊，投简历这事还得看运气，好啊，我微信就是 rapospectre<br>rapospectre            93<br>rapospectre<br>OP<br>   2017-03-20 18:04:44 +08:00<br>@2owe 感谢支持!<br>KIDJourney            94<br>KIDJourney      2017-03-20 18:07:33 +08:00<br>@rapospectre 内推了很多次了，每次都是 hr 把我简历刷了。。。。服辣<br>Antidictator            95<br>Antidictator      2017-03-20 18:13:44 +08:00 via Android<br>@rapospectre 头条我只刷开发者<br>Allianzcortex            96<br>Allianzcortex      2017-03-20 18:26:58 +08:00 via iPhone<br>很厉害啊:-D<br>a87150            97<br>a87150      2017-03-20 18:32:22 +08:00<br>@rapospectre 发现一个问题，斐波那契数列 打错成 费那波数列<br>jesson            98<br>jesson      2017-03-20 19:46:01 +08:00<br>好多系统设计题啊？难道创业公司或者 Python 的都喜欢问这些？楼主平时是怎么准备这类题目的？<br>onyourroad            99<br>onyourroad      2017-03-20 19:50:37 +08:00<br>985 不是白给的啊。<br>rapospectre            100<br>rapospectre<br>OP<br>   2017-03-20 19:53:40 +08:00<br>@daozhihun 招，不过进来后应该是要写 Python 或者 golang ，头条面试不考语言本身的，你看我面试的时候一点 Python 知识都没考<br>1  2<br>1<br>❮    ❯<br>万维广告联盟<br>V2EX专享😍对象存储cos硬核福利，官方放价1元/年！ 新老用户多重好礼<br>万维广告<br>关于   ·   帮助文档   ·   API   ·   FAQ   ·   我们的愿景   ·   广告投放   ·   感谢   ·   实用小工具   ·   4641 人在线   最高记录 5497   ·      Select Language<br>创意工作者们的社区<br>World is powered by solitude<br>VERSION: 3.9.8.5 · 46ms · UTC 02:20 · PVG 10:20 · LAX 18:20 · JFK 21:20<br>Developed with CodeLauncher<br>♥ Do have faith in what you’re doing.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-python类变量和实例变量的异同&quot;&gt;&lt;a href=&quot;#1-python类变量和实例变量的异同&quot; class=&quot;headerlink&quot; title=&quot;1. python类变量和实例变量的异同&quot;&gt;&lt;/a&gt;1. python类变量和实例变量的异同&lt;/h2&gt;&lt;ul</summary>
      
    
    
    
    <category term="python" scheme="http://shizhonggan.github.io/categories/python/"/>
    
    
    <category term="python" scheme="http://shizhonggan.github.io/tags/python/"/>
    
    <category term="后端" scheme="http://shizhonggan.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Docker 部署 Django-Mysql常见错误</title>
    <link href="http://shizhonggan.github.io/2022/01/30/Django/djangodeployerror/"/>
    <id>http://shizhonggan.github.io/2022/01/30/Django/djangodeployerror/</id>
    <published>2022-01-30T03:03:04.000Z</published>
    <updated>2022-02-08T02:45:08.139Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> apt-get install python3-dev nginx</span><br><span class="line">pip3 install -i  https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple uwsgi</span><br><span class="line"></span><br><span class="line">apt-get install mysql-server mysql-client # 连接数据库需要的环境</span><br><span class="line">apt-get install libmysqlclient-dev</span><br><span class="line">pip3 install -i  https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple mysqlclient</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint testcontainer (c55fc0dd481c36765fcd968118c3fbf5c7fa686cdfc625c485f963109b0f89e3):  (iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0&#x2F;0 --dport 5000 -j DNAT --to-destination 172.17.0.2:80 ! -i docker0: iptables: No chain&#x2F;target&#x2F;match by that name.</span><br><span class="line"> (exit status 1))</span><br><span class="line"></span><br><span class="line"># Enter below command, it will clear all chains.</span><br><span class="line">$ sudo iptables -t filter -F</span><br><span class="line">$ iptables -t filter -X</span><br><span class="line"># Then restart Docker Service using below comamnd</span><br><span class="line">$ systemctl restart docker</span><br><span class="line"></span><br><span class="line">ModuleNotFoundError: No module named &#39;statsmodels&#39;</span><br><span class="line"></span><br><span class="line">pip3 install -i  https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple statsmodels</span><br></pre></td></tr></table></figure><h2 id="django-连接已有的MySQL数据库-操作方式"><a href="#django-连接已有的MySQL数据库-操作方式" class="headerlink" title="django 连接已有的MySQL数据库 操作方式"></a>django 连接已有的MySQL数据库 操作方式</h2><h3 id="方法一：采用django自由的语法进行操作"><a href="#方法一：采用django自由的语法进行操作" class="headerlink" title="方法一：采用django自由的语法进行操作"></a>方法一：采用django自由的语法进行操作</h3><p>参考：<a href="https://docs.djangoproject.com/zh-hans/3.0/howto/legacy-databases/">https://docs.djangoproject.com/zh-hans/3.0/howto/legacy-databases/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">python manage.py inspectdb <span class="comment"># 将mysql的数据库创建对应的模型</span></span><br><span class="line">python manage.py inspectdb &gt; models.py <span class="comment"># 将结果保存成文件</span></span><br><span class="line">python manage.py database table_name &gt; models.py <span class="comment"># 只输出特定数据库下某张表对应的模型 </span></span><br><span class="line"><span class="comment">## 例如：</span></span><br><span class="line">class Person(models.Model):</span><br><span class="line">    id = models.IntegerField(primary_key=True)</span><br><span class="line">    first_name = models.CharField(max_length=70)</span><br><span class="line">    class Meta:</span><br><span class="line">       managed = False <span class="comment"># 默认不能进行创建、修改和删除 ，此处修改为True</span></span><br><span class="line">       db_table = <span class="string">&#x27;CENSUS_PERSONS&#x27;</span></span><br><span class="line"></span><br><span class="line">python manage.py migrate </span><br></pre></td></tr></table></figure><p>方法一会存在以下几个问题：（django=2.2，本地windows环境）</p><ul><li>生成model.py文件时，应当在app目录下生成，否则会报错，得不到相应的模型</li><li>生成的model.py文件，是utf-16进制（或其他格式），需要转换为utf-8进制，否则无法识别文件，pycharm右下角可以看到文件进制并修改</li><li>数据库的表存在依赖关系，别名重复等情况。在指定特定表生成模型，注意也要将其他表也生成下来，同时别名重复需要加related_name，可以仔细阅读报错信息进行相应操作</li><li>多个数据库之前不容易操作，需要配置多数据库</li><li>多数据库识别，虽然setting配置了多数据库，但是还是要进行路由操作才能识别，否则只能识别default数据库</li></ul><h3 id="方法二：-第三方库"><a href="#方法二：-第三方库" class="headerlink" title="方法二： 第三方库"></a>方法二： 第三方库</h3><p>pymysql，优点：</p><ul><li>免去多数据库的路由配置</li><li>直接用mysql语句</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    <category term="Django" scheme="http://shizhonggan.github.io/categories/Django/"/>
    
    
    <category term="Docker" scheme="http://shizhonggan.github.io/tags/Docker/"/>
    
    <category term="Django" scheme="http://shizhonggan.github.io/tags/Django/"/>
    
    <category term="Mysql" scheme="http://shizhonggan.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Ansible学习笔记--roles</title>
    <link href="http://shizhonggan.github.io/2021/12/29/Ansible/roles/"/>
    <id>http://shizhonggan.github.io/2021/12/29/Ansible/roles/</id>
    <published>2021-12-29T02:24:04.000Z</published>
    <updated>2022-01-06T09:01:37.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="roles"><a href="#roles" class="headerlink" title="roles"></a>roles</h2><p>ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。<br>roles能够根据层次型结构自动装载变量文件、tasks以及handlers等。<br>要使用roles只需要在playbook中使用include[<strong>已经废弃不用了</strong>]指令即可。<br>简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。<br>角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</p><p>复杂场景：建议使用roles，代码复用度高</p><ul><li>变更指定主机或主机组</li><li>如命名不规范维护和传承成本大</li><li>某些功能需多个Playbook，通过includes即可实现</li></ul><p>角色(roles)：角色集合</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir roles/&#123;mysql,httpd,nginx,memcache&#125; -pv </span><br><span class="line">tree roles</span><br><span class="line">roles/</span><br><span class="line">    mysql/</span><br><span class="line">    httpd/</span><br><span class="line">    nginx/</span><br><span class="line">    memcached/</span><br></pre></td></tr></table></figure><h2 id="基于ansible-roles-安装-nginx"><a href="#基于ansible-roles-安装-nginx" class="headerlink" title="基于ansible roles 安装 nginx"></a>基于ansible roles 安装 nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 环境准备，清除已安装的nginx和用户组</span></span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;yum -y remove nginx&#x27;</span> -b</span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;rpm -q nginx&#x27;</span></span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;getent passwd nginx&#x27;</span></span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;getent group nginx&#x27;</span> </span><br><span class="line">ansible internal -m user -a <span class="string">&#x27;name=nginx state=absent&#x27;</span> -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始</span></span><br><span class="line"><span class="built_in">cd</span> ansible/ <span class="comment"># 根目录</span></span><br><span class="line"><span class="built_in">cd</span> roles/nginx <span class="comment"># 项目文件夹</span></span><br><span class="line"></span><br><span class="line">[ec2-user@master ansible]$ tree</span><br><span class="line">.</span><br><span class="line">├── nginx_role.yml <span class="comment"># 调用文件</span></span><br><span class="line">└── roles</span><br><span class="line">    ├── httpd</span><br><span class="line">    ├── memcached</span><br><span class="line">    ├── mysql</span><br><span class="line">    └── nginx</span><br><span class="line">        ├── tasks <span class="comment"># 在该文件下创建多个任务</span></span><br><span class="line">        │   ├── group.yml</span><br><span class="line">        │   ├── main.yml <span class="comment"># 入口文件</span></span><br><span class="line">        │   ├── restart.yml</span><br><span class="line">        │   ├── start.yml</span><br><span class="line">        │   ├── template.yml</span><br><span class="line">        │   ├── user.yml</span><br><span class="line">        │   └── yum.yml</span><br><span class="line">        └── templates <span class="comment"># 创建配置文件的j2模板</span></span><br><span class="line">            └── nginx.conf.j2</span><br><span class="line"></span><br><span class="line">mkdir tasks templates <span class="comment"># 创建两个常用文件夹</span></span><br><span class="line"><span class="built_in">cd</span> tasks</span><br><span class="line">vi main.yml <span class="comment"># 入口</span></span><br><span class="line">- include: group.yml</span><br><span class="line">- include: user.yml</span><br><span class="line">- include: yum.yml</span><br><span class="line">- include: template.yml</span><br><span class="line">- include: start.yml</span><br><span class="line"></span><br><span class="line">vi group.yml</span><br><span class="line">- name: create group</span><br><span class="line">  group: name=nginx gid=80</span><br><span class="line"></span><br><span class="line">vi user.yml</span><br><span class="line">- name: create user</span><br><span class="line">  user: name=nginx uid=80 group=nginx system=yes shell=/sbin/nologin</span><br><span class="line"></span><br><span class="line">vi yum.yml</span><br><span class="line">- name: install package</span><br><span class="line">  yum: name=nginx</span><br><span class="line"></span><br><span class="line">vi template.yml</span><br><span class="line">- name: copy conf</span><br><span class="line">  template: src=nginx.conf.j2 dest=/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">vi start.yml</span><br><span class="line">- name: start service</span><br><span class="line">  service: name=nginx state=started enabled=yes</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../../../</span><br><span class="line">vi nginx_role.yml</span><br><span class="line">---</span><br><span class="line">- hosts: internal</span><br><span class="line">  remote_user: ec2-user</span><br><span class="line">  become: yes</span><br><span class="line">  roles:</span><br><span class="line">    - role: nginx</span><br><span class="line"></span><br><span class="line">ansible-playbook -C nginx_role.yml <span class="comment"># 检查再执行</span></span><br><span class="line"></span><br><span class="line">rpm -qa nginx <span class="comment"># 查看系统是否有这个安装包</span></span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;ss -ntlp&#x27;</span> <span class="comment"># 可查看到80端口</span></span><br><span class="line">ansible internal -m shell -a <span class="string">&#x27;ps aux|grep nginx&#x27;</span> <span class="comment"># 查看进程 </span></span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## roles目录结构</span></span><br><span class="line">可以互相调用,roles目录结构,每个角色，以特定的层级目录结构进行组织</span><br></pre></td></tr></table></figure><p>playbook.yml  调用角色<br>roles/<br>  project/ (角色名称)<br>    tasks/<br>    files/<br>    vars/<br>    templates/<br>    handlers/<br>    default/ 不常用<br>    meta/    不常用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## Roles各目录作用</span><br></pre></td></tr></table></figure><p>/roles/project/ :项目名称,有以下子目录<br>    files/ ：存放由copy或script模块等调用的文件<br>    templates/：template模块查找所需要模板文件的目录<br>    tasks/：定义task,role的基本元素，至少应该包含一个名为main.yml的文件；<br>            其它的文件需要在此文件中通过include进行包含<br>    handlers/：至少应该包含一个名为main.yml的文件；<br>               其它的文件需要在此文件中通过include进行包含<br>    vars/：定义变量，至少应该包含一个名为main.yml的文件；<br>           其它的文件需要在此文件中通过include进行包含<br>    meta/：定义当前角色的特殊设定及其依赖关系,至少应该包含一个名为main.yml的文件，<br>           其它文件需在此文件中通过include进行包含<br>    default/：设定默认变量时使用此目录中的main.yml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roles&#x2F;appname 目录结构</span><br></pre></td></tr></table></figure><pre><code>tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；           此文件可以使用include包含其它的位于此目录中的task文件files目录：存放由copy或script等模块调用的文件；templates目录：template模块会自动在此目录中寻找Jinja2模板文件handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；              在handler中使用include包含的其它的handler文件也应该位于此目录中；vars目录：应当包含一个main.yml文件，用于定义此角色用到的变量；meta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；          ansible1.3及其以后的版本才支持；default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">roles&#x2F;example_role&#x2F;files&#x2F;             所有文件，都将可存放在这里</span><br><span class="line">roles&#x2F;example_role&#x2F;templates&#x2F;         所有模板都存放在这里</span><br><span class="line">roles&#x2F;example_role&#x2F;tasks&#x2F;main.yml：   主函数，包括在其中的所有任务将被执行</span><br><span class="line">roles&#x2F;example_role&#x2F;handlers&#x2F;main.yml：所有包括其中的 handlers 将被执行</span><br><span class="line">roles&#x2F;example_role&#x2F;vars&#x2F;main.yml：    所有包括在其中的变量将在roles中生效</span><br><span class="line">roles&#x2F;example_role&#x2F;meta&#x2F;main.yml：    roles所有依赖将被正常登入</span><br></pre></td></tr></table></figure><h2 id="创建role"><a href="#创建role" class="headerlink" title="创建role"></a>创建role</h2><p>创建role的步骤</p><ul><li>创建以roles命名的目录</li><li>在roles目录中分别创建以各角色名称命名的目录，如webservers等</li><li>在每个角色命名的目录中分别创建files、handlers、meta、tasks、templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</li><li>在playbook文件中，调用各角色</li></ul><h2 id="实验-创建httpd角色"><a href="#实验-创建httpd角色" class="headerlink" title="实验: 创建httpd角色"></a>实验: 创建httpd角色</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line">1&gt; 创建roles目录</span><br><span class="line">   mkdir roles&#x2F;&#123;httpd,mysql,redis&#125;&#x2F;tasks -pv</span><br><span class="line">   mkdir  roles&#x2F;httpd&#x2F;&#123;handlers,files&#125;</span><br><span class="line"></span><br><span class="line">查看目录结构</span><br><span class="line">tree roles&#x2F;</span><br><span class="line">    roles&#x2F;</span><br><span class="line">    ├── httpd</span><br><span class="line">    │   ├── files</span><br><span class="line">    │   ├── handlers</span><br><span class="line">    │   └── tasks</span><br><span class="line">    ├── mysql</span><br><span class="line">    │   └── tasks</span><br><span class="line">    └── redis</span><br><span class="line">        └── tasks</span><br><span class="line"></span><br><span class="line">2&gt; 创建目标文件</span><br><span class="line">   cd roles&#x2F;httpd&#x2F;tasks&#x2F;</span><br><span class="line">   touch install.yml config.yml service.yml</span><br><span class="line"></span><br><span class="line">3&gt; vim install.yml</span><br><span class="line">   - name: install httpd package</span><br><span class="line">     yum: name&#x3D;httpd</span><br><span class="line">     </span><br><span class="line">   vim config.yml</span><br><span class="line">   - name: config file  </span><br><span class="line">     copy: src&#x3D;httpd.conf dest&#x3D;&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F; backup&#x3D;yes </span><br><span class="line">   </span><br><span class="line">   vim service.yml</span><br><span class="line">   - name: start service </span><br><span class="line">     service: name&#x3D;httpd state&#x3D;started enabled&#x3D;yes</span><br><span class="line">     </span><br><span class="line">4&gt; 创建main.yml主控文件,调用以上单独的yml文件,</span><br><span class="line">   main.yml定义了谁先执行谁后执行的顺序</span><br><span class="line">   vim main.yml</span><br><span class="line">   - include: install.yml</span><br><span class="line">   - include: config.yml</span><br><span class="line">   - include: service.yml</span><br><span class="line">   </span><br><span class="line">5&gt; 准备httpd.conf文件,放到httpd单独的文件目录下</span><br><span class="line">   cp &#x2F;app&#x2F;ansible&#x2F;flies&#x2F;httpd.conf ..&#x2F;files&#x2F;</span><br><span class="line">   </span><br><span class="line">6&gt; 创建一个网页</span><br><span class="line">   vim flies&#x2F;index.html</span><br><span class="line">   &lt;h1&gt; welcome to weixiaodong home &lt;\h1&gt;</span><br><span class="line"></span><br><span class="line">7&gt; 创建网页的yml文件</span><br><span class="line">   vim tasks&#x2F;index.yml</span><br><span class="line">   - name: index.html</span><br><span class="line">     copy: src&#x3D;index.html dest&#x3D;&#x2F;var&#x2F;www&#x2F;html </span><br><span class="line"></span><br><span class="line">8&gt; 将网页的yml文件写进mian.yml文件中</span><br><span class="line">   vim mian.yml</span><br><span class="line">   - include: install.yml</span><br><span class="line">   - include: config.yml</span><br><span class="line">   - include: index.yml</span><br><span class="line">   - include: service.yml</span><br><span class="line"></span><br><span class="line">9&gt; 在handlers目录下创建handler文件mian.yml</span><br><span class="line">   vim handlers&#x2F;main.yml</span><br><span class="line">   - name: restart service httpd</span><br><span class="line">     service: name&#x3D;httpd state&#x3D;restarted</span><br><span class="line"></span><br><span class="line">10&gt; 创建文件调用httpd角色</span><br><span class="line">    cd &#x2F;app&#x2F;ansidle&#x2F;roles</span><br><span class="line">    vim role_httpd.yml</span><br><span class="line">    ---</span><br><span class="line">    # httpd role</span><br><span class="line">    - hosts: appsrvs</span><br><span class="line">      remote_user: root </span><br><span class="line"></span><br><span class="line">      roles:       #调用角色</span><br><span class="line">        - role: httpd  </span><br><span class="line">        </span><br><span class="line">11&gt; 查看目录结构</span><br><span class="line">    tree </span><br><span class="line">    .</span><br><span class="line">    httpd</span><br><span class="line">    ├── files</span><br><span class="line">    │   ├── httpd.conf</span><br><span class="line">    │   └── index.html</span><br><span class="line">    ├── handlers</span><br><span class="line">    │   └── main.yml</span><br><span class="line">    └── tasks</span><br><span class="line">        ├── config.yml</span><br><span class="line">        ├── index.yml</span><br><span class="line">        ├── install.yml</span><br><span class="line">        ├── main.yml</span><br><span class="line">        └── service.yml</span><br><span class="line"></span><br><span class="line">12&gt; ansible-playbook role_httpd.yml</span><br><span class="line">针对大型项目使用Roles进行编排</span><br><span class="line">roles目录结构：</span><br><span class="line">playbook.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">  project&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    handlers&#x2F;</span><br><span class="line">    default&#x2F; # 不经常用</span><br><span class="line">    meta&#x2F;    # 不经常用</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">nginx-role.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">└── nginx</span><br><span class="line">    ├── files</span><br><span class="line">    │ └── main.yml</span><br><span class="line">    ├── tasks</span><br><span class="line">    │ ├── groupadd.yml</span><br><span class="line">    │ ├── install.yml</span><br><span class="line">    │ ├── main.yml</span><br><span class="line">    │ ├── restart.yml</span><br><span class="line">    │ └── useradd.yml</span><br><span class="line">    └── vars</span><br><span class="line">        └── main.yml</span><br><span class="line">示例</span><br><span class="line">roles的示例如下所示：</span><br><span class="line">site.yml</span><br><span class="line">webservers.yml</span><br><span class="line">dbservers.yml</span><br><span class="line">roles&#x2F;</span><br><span class="line">  common&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">    handlers&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    meta&#x2F;</span><br><span class="line">  webservers&#x2F;</span><br><span class="line">    files&#x2F;</span><br><span class="line">    templates&#x2F;</span><br><span class="line">    tasks&#x2F;</span><br><span class="line">  handlers&#x2F;</span><br><span class="line">    vars&#x2F;</span><br><span class="line">    meta&#x2F;</span><br><span class="line">实验： 创建一个nginx角色</span><br><span class="line">建立nginx角色在多台主机上来部署nginx需要安装 创建账号</span><br><span class="line">1&gt; 创建nginx角色目录</span><br><span class="line">     cd &#x2F;app&#x2F;ansible&#x2F;role</span><br><span class="line">     mkdir nginx&#123;tesks,templates,hanslers&#125; -pv</span><br><span class="line"></span><br><span class="line">2&gt; 创建任务目录</span><br><span class="line">     cd tasks&#x2F;</span><br><span class="line">     touch insatll.yml config.yml service.yml file.yml user.yml</span><br><span class="line">   创建main.yml文件定义任务执行顺序</span><br><span class="line">     vim main.yml</span><br><span class="line">     - include: user.yml</span><br><span class="line">     - include: insatll.yml</span><br><span class="line">     - include: config.yml</span><br><span class="line">     - include: file.yml</span><br><span class="line">     - include: service.yml</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">3&gt; 准备配置文件(centos7、8)</span><br><span class="line">   ll &#x2F;app&#x2F;ansible&#x2F;role&#x2F;nginx&#x2F;templates&#x2F;</span><br><span class="line">   nginx7.conf.j2</span><br><span class="line">   nginx8.conf.j2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4&gt; 定义任务</span><br><span class="line">   vim tasks&#x2F;install.yml</span><br><span class="line">   - name: install</span><br><span class="line">     yum: name&#x3D;nginx</span><br><span class="line">     </span><br><span class="line">   vim tasks&#x2F;config.yml</span><br><span class="line">    - name: config file</span><br><span class="line">      template: src&#x3D;nginx7.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      when: ansible_distribution_major_version&#x3D;&#x3D;&quot;7&quot;</span><br><span class="line">      notify: restrat</span><br><span class="line">      </span><br><span class="line">    - name: config file</span><br><span class="line">      template: src&#x3D;nginx8.conf.j2 dest&#x3D;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class="line">      when: ansible_distribution_major_version&#x3D;&#x3D;&quot;8&quot;</span><br><span class="line">      notify: restrat</span><br><span class="line">      </span><br><span class="line">    vim tasks&#x2F;file.yml   跨角色调用file.yum文件,实现文件复用</span><br><span class="line">    - name: index.html</span><br><span class="line">      copy: src&#x3D;roles&#x2F;httpd&#x2F;files&#x2F;index.html dest&#x3D;&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F; </span><br><span class="line">   </span><br><span class="line">    vim tasks&#x2F;service.yml</span><br><span class="line">    - nmae: start service</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;started enabled&#x3D;yes</span><br><span class="line">      </span><br><span class="line">    vim handlers&#x2F;main.yml</span><br><span class="line">    - name: restrat</span><br><span class="line">      service: name&#x3D;nginx state&#x3D;restarted</span><br><span class="line">      </span><br><span class="line">    vim roles&#x2F;role_nginix.yml</span><br><span class="line">    --- </span><br><span class="line">    #test rcle</span><br><span class="line">    - hosts: appsrvs</span><br><span class="line">    </span><br><span class="line">      roles: </span><br><span class="line">        - role: nginx</span><br><span class="line">        </span><br><span class="line">5&gt; 测试安装</span><br><span class="line">   ansible-playbook role_nginx.yml</span><br></pre></td></tr></table></figure><h2 id="playbook调用角色"><a href="#playbook调用角色" class="headerlink" title="playbook调用角色"></a>playbook调用角色</h2><p>调用角色方法1：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><p>调用角色方法2：传递变量给角色</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">  <span class="attr">remote_user:</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">nginx</span>, <span class="attr">username:</span> <span class="string">nginx</span> &#125;   <span class="comment">#不同的角色调用不同的变量  </span></span><br><span class="line">    <span class="string">键role用于指定角色名称</span></span><br><span class="line">    <span class="string">后续的k/v用于传递变量给角色</span></span><br></pre></td></tr></table></figure><p>调用角色方法3：还可基于条件测试实现角色调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">roles:</span><br><span class="line">  - &#123; role: nginx, username: nginx, when: ansible_distribution_major_version &#x3D;&#x3D; &#39;7&#39; &#125;</span><br></pre></td></tr></table></figure><h2 id="通过roles传递变量"><a href="#通过roles传递变量" class="headerlink" title="通过roles传递变量"></a>通过roles传递变量</h2><p>当给一个主机应用角色的时候可以传递变量，然后在角色内使用这些变量</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;web&#x2F;htdocs&#x2F;a.com&#39;, port: 8080 &#125;</span><br></pre></td></tr></table></figure><h2 id="向roles传递参数"><a href="#向roles传递参数" class="headerlink" title="向roles传递参数"></a>向roles传递参数</h2><p>而在playbook中，可以这样使用roles:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">webservers</span></span><br></pre></td></tr></table></figure><p>也可以向roles传递参数,示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">- hosts: webservers</span><br><span class="line">  roles:</span><br><span class="line">    - common</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;a&#39;, port: 5000 &#125;</span><br><span class="line">    - &#123; role: foo_app_instance, dir: &#39;&#x2F;opt&#x2F;b&#39;, port: 5001 &#125;</span><br></pre></td></tr></table></figure><h2 id="条件式地使用roles"><a href="#条件式地使用roles" class="headerlink" title="条件式地使用roles"></a>条件式地使用roles</h2><p>示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">some_role</span>, <span class="attr">when:</span> <span class="string">&quot;ansible_os_family == &#x27;RedHat&#x27;&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="Roles条件及变量等案例"><a href="#Roles条件及变量等案例" class="headerlink" title="Roles条件及变量等案例"></a>Roles条件及变量等案例</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># When条件</span></span><br><span class="line">    <span class="attr">roles:</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">role:</span> <span class="string">nginx</span>, <span class="attr">when:</span> <span class="string">&quot;ansible_distribution_major_version == &#x27;7&#x27; &quot;</span> ,<span class="attr">username:</span> <span class="string">nginx</span> &#125;</span><br><span class="line"><span class="comment"># 变量调用</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">zabbix-proxy</span></span><br><span class="line">  <span class="attr">sudo:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">geerlingguy.php-mysql</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">dj-wasabi.zabbix-proxy</span>, <span class="attr">zabbix_server_host:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.167</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="完整的roles架构"><a href="#完整的roles架构" class="headerlink" title="完整的roles架构"></a>完整的roles架构</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx-role.yml 顶层任务调用yml文件</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">testweb</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">httpd</span> <span class="string">可执行多个role</span></span><br><span class="line"></span><br><span class="line"><span class="string">cat</span> <span class="string">roles/nginx/tasks/main.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">groupadd.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">useradd.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">install.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">restart.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">filecp.yml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># roles/nginx/tasks/groupadd.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">group</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line"></span><br><span class="line"><span class="string">cat</span> <span class="string">roles/nginx/tasks/filecp.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">file</span> <span class="string">copy</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=tom.conf</span> <span class="string">dest=/tmp/tom.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下文件格式类似：</span></span><br><span class="line"><span class="string">useradd.yml,install.yml,restart.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">ls</span> <span class="string">roles/nginx/files/</span></span><br><span class="line"><span class="string">tom.conf</span></span><br></pre></td></tr></table></figure><h2 id="roles-playbook-tags使用"><a href="#roles-playbook-tags使用" class="headerlink" title="roles playbook tags使用"></a>roles playbook tags使用</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">ansible-playbook</span> <span class="string">--tags=&quot;nginx,httpd,mysql&quot;</span> <span class="string">nginx-role.yml</span> <span class="comment">#对标签进行挑选执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  nginx-role.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">testweb</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">nginx</span> ,<span class="attr">tags:</span> [ <span class="string">&#x27;nginx&#x27;</span>, <span class="string">&#x27;web&#x27;</span> ] ,<span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">&quot;6“ &#125;</span></span><br><span class="line"><span class="string">    - &#123; role: httpd ,tags: [ &#x27;httpd&#x27;, &#x27;web&#x27; ] &#125;</span></span><br><span class="line"><span class="string">    - &#123; role: mysql ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span></span><br><span class="line"><span class="string">    - &#123; role: marridb ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span></span><br><span class="line"><span class="string">    - &#123; role: php &#125;</span></span><br></pre></td></tr></table></figure><h2 id="实验-创建角色memcached"><a href="#实验-创建角色memcached" class="headerlink" title="实验: 创建角色memcached"></a>实验: 创建角色memcached</h2><p>memcacched 当做缓存用,会在内存中开启一块空间充当缓存</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">/etc/sysconfig/memcached</span> </span><br><span class="line">    <span class="string">PORT=&quot;11211&quot;</span></span><br><span class="line">    <span class="string">USER=&quot;memcached&quot;</span></span><br><span class="line">    <span class="string">MAXCONN=&quot;1024&quot;</span></span><br><span class="line">    <span class="string">CACHESIZE=&quot;64&quot;</span>    <span class="comment"># 缓存空间默认64M </span></span><br><span class="line">    <span class="string">OPTIONS=&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">&gt;</span> <span class="string">创建对用目录</span></span><br><span class="line">   <span class="string">cd</span> <span class="string">/app/ansible</span></span><br><span class="line">   <span class="string">mkdir</span> <span class="string">roles/memcached/&#123;tasks,templates&#125;</span> <span class="string">-pv</span></span><br><span class="line">   </span><br><span class="line"><span class="number">2</span><span class="string">&gt;</span> <span class="string">拷贝memcached配置文件模板</span></span><br><span class="line">   <span class="string">cp</span> <span class="string">/etc/sysconfig/memcached</span>  <span class="string">templates/memcached.j2</span></span><br><span class="line">   <span class="string">vim</span> <span class="string">templates/memcached.j2</span></span><br><span class="line">   <span class="string">CACHESIZE=&quot;&#123;&#123;ansible_memtotal_mb//4&#125;&#125;&quot;</span>   <span class="comment">#物理内存的1/4用做缓存</span></span><br><span class="line">   </span><br><span class="line"><span class="number">3</span><span class="string">&gt;</span> <span class="string">创建对应yml文件,并做相应配置</span></span><br><span class="line">   <span class="string">cd</span> <span class="string">tasks/</span></span><br><span class="line">   <span class="string">touch</span> <span class="string">install.yml</span> <span class="string">config.yml</span> <span class="string">service.yml</span></span><br><span class="line">   <span class="string">创建main.yml文件定义任务执行顺序</span></span><br><span class="line">   <span class="string">vim</span> <span class="string">main.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">install.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">config.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">include:</span> <span class="string">service.yml</span>  </span><br><span class="line">   </span><br><span class="line">   <span class="string">vim</span> <span class="string">install.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> </span><br><span class="line">     <span class="attr">yum:</span> <span class="string">name=memcached</span></span><br><span class="line">     </span><br><span class="line">   <span class="string">vim</span> <span class="string">config.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line">     <span class="attr">template:</span> <span class="string">src=memcached.j2</span> <span class="string">dets=/etc/sysconfig/memcached</span></span><br><span class="line"></span><br><span class="line">   <span class="string">vim</span> <span class="string">service.yml</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">service</span></span><br><span class="line">     <span class="attr">service:</span> <span class="string">name=memcached</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span><span class="string">&gt;</span> <span class="string">创建调用角色文件</span></span><br><span class="line">   <span class="string">cd</span> <span class="string">/app/ansible/roles/</span></span><br><span class="line">   <span class="string">vim</span> <span class="string">role_memcached.yml</span></span><br><span class="line">    <span class="string">---</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">appsrvs</span></span><br><span class="line">    </span><br><span class="line">      <span class="attr">roles:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">role:</span> <span class="string">memcached</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span><span class="string">&gt;</span> <span class="string">安装</span></span><br><span class="line">   <span class="string">ansible-playbook</span>  <span class="string">role_memcached.yml</span> </span><br><span class="line">   <span class="string">memcached端口号11211</span></span><br></pre></td></tr></table></figure><h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><ul><li>委任（指定某一台机器做某一个task）<ul><li>delegate_to</li><li>local_action (专指针对ansible命令执行的机器做的变更操作)</li></ul></li><li>交互提示<ul><li>prompt</li></ul></li><li>*暂停（java）<ul><li>wait_for</li></ul></li><li>Debug<ul><li>debug: msg=”This always executes.”</li></ul></li><li>Include</li><li>Template 多值合并</li><li>Template 动态变量配置</li></ul><h2 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible Roles"></a>Ansible Roles</h2><ul><li>委任<ul><li>delegate_to</li></ul></li><li>交互提示<ul><li>prompt</li></ul></li><li>暂停<ul><li>wait_for</li></ul></li><li>Debug<ul><li>debug: msg=”This always executes.”</li></ul></li><li>Include</li><li>Template 多值合并</li><li>Template 动态变量配置</li></ul><h2 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;galaxy.ansible.com</span><br><span class="line">https:&#x2F;&#x2F;galaxy.ansible.com&#x2F;explore#&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;github.com&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;ansible.com.cn&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ansible&#x2F;ansible</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ansible&#x2F;ansible-examples</span><br></pre></td></tr></table></figure><h2 id="实验-实现二进制安装mysql的卸载"><a href="#实验-实现二进制安装mysql的卸载" class="headerlink" title="实验: 实现二进制安装mysql的卸载"></a>实验: 实现二进制安装mysql的卸载</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">remove_mysql.yml</span> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># install mariadb server </span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">appsrvs:!192.168.38.108</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">stop</span> <span class="string">service</span> </span><br><span class="line">      <span class="attr">shell:</span> <span class="string">/etc/init.d/mysqld</span> <span class="string">stop</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">delete</span> <span class="string">user</span> </span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=mysql</span> <span class="string">state=absent</span> <span class="string">remove=yes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">delete</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">path=&#123;&#123;item&#125;&#125;</span> <span class="string">state=absent</span></span><br><span class="line">      <span class="attr">with_items:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/mysql</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/local/mariadb-10.2.27-linux-x86_64</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/init.d/mysqld</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/profile.d/mysql.sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/etc/my.cnf</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/data/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="string">ansible-playbook</span>  <span class="string">remove_mysql.yml</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;roles&quot;&gt;&lt;a href=&quot;#roles&quot; class=&quot;headerlink&quot; title=&quot;roles&quot;&gt;&lt;/a&gt;roles&lt;/h2&gt;&lt;p&gt;ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。&lt;br&gt;roles能够根据层次型结</summary>
      
    
    
    
    <category term="Ansible" scheme="http://shizhonggan.github.io/categories/Ansible/"/>
    
    
    <category term="运维" scheme="http://shizhonggan.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>容器数据磁盘被写满处理</title>
    <link href="http://shizhonggan.github.io/2021/12/24/Docker/dockerclean/"/>
    <id>http://shizhonggan.github.io/2021/12/24/Docker/dockerclean/</id>
    <published>2021-12-24T05:54:04.000Z</published>
    <updated>2021-12-24T05:44:59.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>挺不错的博客： <a href="https://tencentcloudcontainerteam.github.io/tke-handbook/best-practice/kubernetes-best-practice-handle-disk-full.html">https://tencentcloudcontainerteam.github.io/tke-handbook/best-practice/kubernetes-best-practice-handle-disk-full.html</a></p><h2 id="简略步骤"><a href="#简略步骤" class="headerlink" title="简略步骤"></a>简略步骤</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d /var/lib/docker/containers</span><br><span class="line">$ du -sh * <span class="comment"># 找到比较大的目录</span></span><br><span class="line">$ <span class="built_in">cd</span> dda02c9a7491fa797ab730c1568ba06cba74cecd4e4a82e9d90d00fa11de743c</span><br><span class="line">$ cat /dev/null &gt; dda02c9a7491fa797ab730c1568ba06cba74cecd4e4a82e9d90d00fa11de743c-json.log.9 <span class="comment"># 删除log文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;挺不错的博客： &lt;a href=&quot;https://tencentcloudcontainerteam.github.io/tke-handb</summary>
      
    
    
    
    <category term="Docker" scheme="http://shizhonggan.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://shizhonggan.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用命令</title>
    <link href="http://shizhonggan.github.io/2021/11/29/Linux/command/"/>
    <id>http://shizhonggan.github.io/2021/11/29/Linux/command/</id>
    <published>2021-11-29T02:24:04.000Z</published>
    <updated>2021-12-24T08:51:42.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wc-l-统计行数"><a href="#wc-l-统计行数" class="headerlink" title="wc -l 统计行数"></a>wc -l 统计行数</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible-doc -l |wc -l <span class="comment"># 统计ansible模块个数</span></span><br></pre></td></tr></table></figure><h2 id="cat-追加方式-修改网卡文件"><a href="#cat-追加方式-修改网卡文件" class="headerlink" title="cat 追加方式 修改网卡文件"></a>cat 追加方式 修改网卡文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; ifcfg-eth1   <span class="comment"># 当没有对应网卡的配置文件时</span></span><br><span class="line">DEVICE=eth1</span><br><span class="line">BOOTPROTO=dhcp </span><br><span class="line"></span><br><span class="line">service network restart </span><br><span class="line">service NetworkManager restart <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;wc-l-统计行数&quot;&gt;&lt;a href=&quot;#wc-l-统计行数&quot; class=&quot;headerlink&quot; title=&quot;wc -l 统计行数&quot;&gt;&lt;/a&gt;wc -l 统计行数&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="Linux" scheme="http://shizhonggan.github.io/categories/Linux/"/>
    
    
    <category term="Shell commands" scheme="http://shizhonggan.github.io/tags/Shell-commands/"/>
    
  </entry>
  
  <entry>
    <title>Nvidia 2022年会议</title>
    <link href="http://shizhonggan.github.io/2021/11/29/Note/Nvidia_2022/"/>
    <id>http://shizhonggan.github.io/2021/11/29/Note/Nvidia_2022/</id>
    <published>2021-11-29T02:24:04.000Z</published>
    <updated>2022-03-24T02:05:22.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;/h2&gt;
</summary>
      
    
    
    
    <category term="Nvidia" scheme="http://shizhonggan.github.io/categories/Nvidia/"/>
    
    
    <category term="Nvidia" scheme="http://shizhonggan.github.io/tags/Nvidia/"/>
    
  </entry>
  
  <entry>
    <title>Beats信息采集</title>
    <link href="http://shizhonggan.github.io/2021/11/01/ELK/Beats/"/>
    <id>http://shizhonggan.github.io/2021/11/01/ELK/Beats/</id>
    <published>2021-11-01T02:03:04.000Z</published>
    <updated>2021-11-11T02:24:20.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.elastic.co/cn/beats/">官网</a></p><h2 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h2><p>Filebeat是一个轻量级的日志采集器</p><p>当面对成百上千、甚至成千上万的服务器、虚拟机和容器生成的日志时，采用ssh十分麻烦。而Filebeat 可以提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p><p>启动Filebeat后， 打开Logs UI, 直接在Kibana中观看对您的文件进行tail操作的过程。通过搜索栏按照服务、应用程序、主机、数据中心或者其他条件筛选，以跟踪您的全部汇总日志中的异常行为。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.15.1-linux-x86_64.tar.gz</span><br><span class="line">tar xzvf filebeat-7.15.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">mv filebeat-7.15.1-linux-x86_64 /filebeat</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> filebeat</span><br><span class="line">vim gszbeat.yml <span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="comment">#### 内容如下</span></span><br><span class="line">filebeat.inputs: <span class="comment"># filebeat input输入</span></span><br><span class="line">- <span class="built_in">type</span>: stdin    <span class="comment"># 标准输入</span></span><br><span class="line">  enabled: <span class="literal">true</span>  <span class="comment"># 启用标准输入</span></span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 3 <span class="comment"># 指定下载数</span></span><br><span class="line">output.console:  <span class="comment"># 控制台输出</span></span><br><span class="line">  pretty: <span class="literal">true</span>   <span class="comment"># 启用美化功能</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">./filebeat -e -c gszbeat.yml <span class="comment"># 启动</span></span><br><span class="line">chmod go-w /home/ec2-user/<span class="built_in">test</span>/filebeat/gszbeat.yml <span class="comment"># 若报错执行此命令</span></span><br></pre></td></tr></table></figure><p>然后我们在控制台输入hello，就能看到我们会有一个json的输出，是通过读取到我们控制台的内容后输出的。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim gszbeat-log.yml <span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="comment">#### 内容如下</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /home/ec2-user/<span class="built_in">test</span>/filebeattest/*.<span class="built_in">log</span></span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 2</span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">./filebeat -e -c gszbeat.yml <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/ec2-user/<span class="built_in">test</span>/filebeattest/ <span class="comment"># 执行如下操作，会立刻读取更新的内容，并输出到控制台</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ganshizhong&quot;</span> &gt;&gt; a.log </span><br></pre></td></tr></table></figure><h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim gszbeat-log.yml <span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="comment">#### 内容如下</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /home/ec2-user/<span class="built_in">test</span>/filebeattest/*.<span class="built_in">log</span></span><br><span class="line">  tags:[<span class="string">&quot;web&quot;</span>,<span class="string">&quot;test&quot;</span>] <span class="comment">#添加自定义tag，便于后续的处理</span></span><br><span class="line">  fields: <span class="comment"># 添加自定义字段</span></span><br><span class="line">    from: test-web</span><br><span class="line">  fields_under_root: <span class="literal">true</span> <span class="comment">#true为添加到根节点，false为添加到子节点中</span></span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 2</span><br><span class="line">output.console:</span><br><span class="line">  pretty: <span class="literal">true</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">./filebeat -e -c gszbeat.yml <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/ec2-user/<span class="built_in">test</span>/filebeattest/ <span class="comment"># 执行如下操作，会立刻读取更新的内容，并输出到控制台</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ganshizhong&quot;</span> &gt;&gt; a.log </span><br></pre></td></tr></table></figure><h3 id="输出到Elasticsearch"><a href="#输出到Elasticsearch" class="headerlink" title="输出到Elasticsearch"></a>输出到Elasticsearch</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim gszbeat-log.yml <span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="comment">#### 内容如下</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">- <span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  paths:</span><br><span class="line">    - /home/ec2-user/<span class="built_in">test</span>/filebeattest/*.<span class="built_in">log</span></span><br><span class="line">  tags:[<span class="string">&quot;web&quot;</span>,<span class="string">&quot;test&quot;</span>] <span class="comment">#添加自定义tag，便于后续的处理</span></span><br><span class="line">  fields: <span class="comment"># 添加自定义字段</span></span><br><span class="line">    from: test-web</span><br><span class="line">  fields_under_root: <span class="literal">true</span> <span class="comment">#true为添加到根节点，false为添加到子节点中</span></span><br><span class="line">setup.template.settings: </span><br><span class="line">  index.number_of_shards: 2</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line">./filebeat -e -c gszbeat.yml <span class="comment"># 启动</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /home/ec2-user/<span class="built_in">test</span>/filebeattest/ <span class="comment"># 执行如下操作，会立刻读取更新的内容，并输出到控制台</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ganshizhong&quot;</span> &gt;&gt; a.log </span><br></pre></td></tr></table></figure><h2 id="Filebeat工作原理"><a href="#Filebeat工作原理" class="headerlink" title="Filebeat工作原理"></a>Filebeat工作原理</h2><p>Filebeat主要由下面几个组件组成： harvester、prospector 、input</p><ul><li>harvester<ul><li>负责读取单个文件的内容</li><li>harvester逐行读取每个文件（一行一行读取），并把这些内容发送到输出</li><li>每个文件启动一个harvester，并且harvester负责打开和关闭这些文件，这就意味着harvester运行时文件描述符保持着打开的状态。</li><li>在harvester正在读取文件内容的时候，文件被删除或者重命名了，那么Filebeat就会续读这个文件，这就会造成一个问题，就是只要负责这个文件的harvester没用关闭，那么磁盘空间就不会被释放，默认情况下，Filebeat保存问价你打开直到close_inactive到达</li></ul></li><li>prospector<ul><li>prospector负责管理harvester并找到所有要读取的文件来源</li><li>如果输入类型为日志，则查找器将查找路径匹配的所有文件，并为每个文件启动一个harvester</li><li>Filebeat目前支持两种prospector类型：log和stdin</li></ul></li><li>Filebeat如何保持文件的状态<ul><li>Filebeat保存每个文件的状态并经常将状态刷新到磁盘上的注册文件中</li><li>该状态用于记住harvester正在读取的最后偏移量，并确保发送所有日志行。</li><li>如果输出（例如ElasticSearch或Logstash）无法访问，Filebeat会跟踪最后发送的行，并在输出再次可以用时继续读取文件。</li><li>在Filebeat运行时，每个prospector内存中也会保存的文件状态信息，当重新启动Filebat时，将使用注册文件的数量来重建文件状态，Filebeat将每个harvester在从保存的最后偏移量继续读取</li><li>文件状态记录在data/registry文件中</li></ul></li><li>input<ul><li> 一个input负责管理harvester，并找到所有要读取的源</li><li>如果input类型是log，则input查找驱动器上与已定义的glob路径匹配的所有文件，并为每个文件启动一个harvester</li><li>每个input都在自己的Go例程中运行</li></ul></li></ul><p>下面的例子配置Filebeat从所有匹配指定的glob模式的文件中读取行</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/log/*.log</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/path2/*.log</span></span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -e -c mogublog-es.yml</span><br><span class="line">./filebeat -e -c mogublog-es.yml -d <span class="string">&quot;publish&quot;</span></span><br><span class="line"><span class="comment">## 参数说明</span></span><br><span class="line">-e: 输出到标准输出，默认输出到syslog和logs下</span><br><span class="line">-c：指定配置文件</span><br><span class="line">-d：输出debug信息</span><br></pre></td></tr></table></figure><h2 id="Module-日志数据处理"><a href="#Module-日志数据处理" class="headerlink" title="Module 日志数据处理"></a>Module 日志数据处理</h2><p>前面要想实现日志数据的读取以及处理都是自己手动配置的，其实，在Filebeat中，有大量的Module，可以简化我们的配置，直接就可以使用，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">./filebeat modules list</span><br><span class="line"><span class="comment">## 显示如下：</span></span><br><span class="line">Enabled:</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">Disabled:</span><br><span class="line">...</span><br><span class="line">kafka</span><br><span class="line">kibana</span><br><span class="line">mongodb</span><br><span class="line">mysql</span><br><span class="line">redis</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./filebeat modules <span class="built_in">enable</span> nginx <span class="comment"># 启动</span></span><br><span class="line">./filebeat modules <span class="built_in">disable</span> nginx <span class="comment"># 禁用</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 启用nginx后，进行配置</span></span><br><span class="line"><span class="built_in">cd</span> modules.d/</span><br><span class="line">grep -Ev <span class="string">&#x27;*#|^$&#x27;</span> nginx.yml</span><br><span class="line"><span class="comment">## 输出，然后修改如下：</span></span><br><span class="line">- module: nginx</span><br><span class="line">  access:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    var.paths: [<span class="string">&quot;/home/ec2-user/program/gitlab/logs/nginx/*.log&quot;</span>]</span><br><span class="line">  error:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">    var.paths: [<span class="string">&quot;/home/ec2-user/program/gitlab/logs/nginx/*.log&quot;</span>]</span><br><span class="line">  ingress_controller:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">vi nginx.yml <span class="comment"># 新建配置文件，内容如下</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">filebeat.inputs:</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 3</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [<span class="string">&quot;127.0.0.1:9200&quot;</span>]</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>s</p><h2 id="Metricbeat"><a href="#Metricbeat" class="headerlink" title="Metricbeat"></a>Metricbeat</h2><p>用于从系统和服务搜集指标。Matricbeat能够以一种轻量型的方式，输送各种系统和服务统计数据，从CPU到内存，从Redis到Nginx，不一而足。</p><ul><li>定期收集操作系统或应用程序的指标数据</li><li>存储到Elasticsearch中，进行实施的分析</li></ul><h3 id="Metricbeat组成"><a href="#Metricbeat组成" class="headerlink" title="Metricbeat组成"></a>Metricbeat组成</h3><p>Metricbeat有2部分组成，一部分是Module，另一个部分为Metricset</p><ul><li>Module<ul><li>收集的对象：如 MySQL、Redis、Nginx、操作系统等</li></ul></li><li>Metricset<ul><li>收集指标的集合：如 cpu、memory，network等</li></ul></li></ul><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl -L -O https://artifacts.elastic.co/downloads/beats/metricbeat/metricbeat-7.15.1-linux-arm64.tar.gz</span><br><span class="line">tar xzvf filebeat-7.15.1-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -</span><br><span class="line">sudo apt-get install apt-transport-https</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://artifacts.elastic.co/packages/7.x/apt stable main&quot;</span> | sudo tee -a /etc/apt/sources.list.d/elastic-7.x.list <span class="comment"># 貌似不用修改x,也可自动下载7.15.1，默认最新的</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> metricbeat</span><br><span class="line"><span class="comment"># If your system does not use systemd then run:</span></span><br><span class="line"><span class="comment"># sudo update-rc.d metricbeat defaults 95 10</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">grep -Ev <span class="string">&quot;^*#|^$&quot;</span> metricbeat.yml</span><br><span class="line"><span class="comment">### 返回</span></span><br><span class="line">metricbeat.config.modules:</span><br><span class="line">  path: <span class="variable">$&#123;path.config&#125;</span>/modules.d/*.yml</span><br><span class="line">  reload.enabled: <span class="literal">false</span></span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 1</span><br><span class="line">  index.codec: best_compression</span><br><span class="line">setup.kibana:</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  <span class="comment"># hosts: [&quot;localhost:9200&quot;]# 修改</span></span><br><span class="line">  hosts: [<span class="string">&quot;119.255.249.177:9200&quot;</span>]</span><br><span class="line">processors:</span><br><span class="line">  - add_host_metadata: ~</span><br><span class="line">  - add_cloud_metadata: ~</span><br><span class="line">  - add_docker_metadata: ~</span><br><span class="line">  - add_kubernetes_metadata: ~</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s#hosts: \[&quot;localhost:9200&quot;\]#hosts: [&quot;119.255.249.177:9200&quot;]#&#x27;</span> metricbeat.yml</span><br><span class="line"></span><br><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure><h2 id="Nginx-Module"><a href="#Nginx-Module" class="headerlink" title="Nginx Module"></a>Nginx Module</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启Nginx Module，</span></span><br><span class="line"><span class="comment">#在nginx中，需要开启状态查询，才能查询到指标数据。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重新编译nginx</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">./nginx -V <span class="comment">#查询版本信息</span></span><br><span class="line">nginx version: nginx/1.11.6</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC)</span><br><span class="line">configure arguments: --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置nginx</span></span><br><span class="line">vim nginx.conf</span><br><span class="line">location /nginx-status &#123;</span><br><span class="line">    stub_status on;</span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment">### 测试： 119.255.x.x/nginx-status</span></span><br></pre></td></tr></table></figure><p>结果说明：</p><ul><li>Active connections：正在处理的活动连接数</li><li>server accepts handled requests<ul><li>第一个 server 表示Nginx启动到现在共处理了9个连接</li><li>第二个 accepts 表示Nginx启动到现在共成功创建 9 次握手</li><li>第三个 handled requests 表示总共处理了 21 次请求</li><li>请求丢失数 = 握手数 - 连接数 ，可以看出目前为止没有丢失请求</li></ul></li><li>Reading: 0 Writing: 1 Waiting: 1<ul><li>Reading：Nginx 读取到客户端的 Header 信息数</li><li>Writing：Nginx 返回给客户端 Header 信息数</li><li>Waiting：Nginx 已经处理完正在等候下一次请求指令的驻留链接（开启keep-alive的情况下，这个值等于 Active - (Reading+Writing)）</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">配置nginx module</span><br><span class="line"><span class="comment">#启用redis module</span></span><br><span class="line">./metricbeat modules <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改redis module配置</span></span><br><span class="line">vim modules.d/nginx.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 然后修改下面的信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module: nginx</span></span><br><span class="line"><span class="comment"># Docs: https://www.elastic.co/guide/en/beats/metricbeat/6.5/metricbeat-modulenginx.</span></span><br><span class="line">html</span><br><span class="line">  - module: nginx</span><br><span class="line"><span class="comment">#metricsets:</span></span><br><span class="line"><span class="comment"># - stubstatus</span></span><br><span class="line">  period: 10s</span><br><span class="line"><span class="comment"># Nginx hosts</span></span><br><span class="line">  hosts: [<span class="string">&quot;http://127.0.0.1&quot;</span>]</span><br><span class="line"><span class="comment"># Path to server status. Default server-status</span></span><br><span class="line">  server_status_path: <span class="string">&quot;nginx-status&quot;</span></span><br><span class="line"><span class="comment">#username: &quot;user&quot;</span></span><br><span class="line"><span class="comment">#password: &quot;secret&quot;</span></span><br><span class="line">修改完成后，启动nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">./metricbeat -e</span><br></pre></td></tr></table></figure><p>更多Module使用参见官方文档：<br><a href="https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html">https://www.elastic.co/guide/en/beats/metricbeat/current/metricbeat-modules.html</a></p><p><a href="https://www.cnblogs.com/cjsblog/p/9495024.html">https://www.cnblogs.com/cjsblog/p/9495024.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/cn/beats/&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Filebeat</summary>
      
    
    
    
    <category term="ELK" scheme="http://shizhonggan.github.io/categories/ELK/"/>
    
    
    <category term="ELK" scheme="http://shizhonggan.github.io/tags/ELK/"/>
    
    <category term="Nginx" scheme="http://shizhonggan.github.io/tags/Nginx/"/>
    
  </entry>
  
</feed>
